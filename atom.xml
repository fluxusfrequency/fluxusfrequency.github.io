<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fluxus Frequency]]></title>
  <link href="http://fluxusfrequency.github.io/atom.xml" rel="self"/>
  <link href="http://fluxusfrequency.github.io/"/>
  <updated>2018-01-02T07:28:18-07:00</updated>
  <id>http://fluxusfrequency.github.io/</id>
  <author>
    <name><![CDATA[Ben Lewis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[How To Write Code With Style: 7 Tips For Cleaner Code]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/08/29/how-to-write-code-with-style-7-tips-for-cleaner-code/"/>
    
    <updated>2016-08-29T20:29:38-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/08/29/how-to-write-code-with-style-7-tips-for-cleaner-code</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2016/how-to-write-code-with-style-7-tips-cleaner-code">Engine Yard</a></p>

<h2>Say What You Mean, Mean What You Say</h2>

<p>Code is communication. It has two audiences: the computer, and the future maintainer. How we communicate with the computer is rather objective: you either gave it the instructions to do what you really wanted, or you didn&rsquo;t.</p>

<p>But people aren&rsquo;t so easy. As computer programmers, we channel our hopes, dreams, and moods into our writing. <a href="https://wordpress.org">WordPress</a> popularized the slogan &ldquo;Code is Poetry&rdquo;. To me, it reads as a true statement.</p>

<p>There are as many ways to write code as there are programmers, and we all do it a little bit differently. There&rsquo;s beauty in this diversity, but it also makes it harder to be understood. And the harder it is to read code, the longer it takes to maintain and extend it. Time is money, so this is a bummer when it comes to building a tech business.</p>

<p>How can we effectively communicate with other humans when we&rsquo;re programming? Write code with style! In this post, we&rsquo;ll explore seven rules of thumb that you can use to write cleaner code.</p>

<h2>1. Business Value Comes First</h2>

<p>There are many motivations that drive a programmer when she sits down to write code. Maybe she wants to be a <a href="https://news.ycombinator.com/item?id=1757059">rock star</a>. She&rsquo;s going to show everyone how smart she is by using the most arcane methods available in her language. Maybe she&rsquo;s interested in functional programming, and wants to see if she can find a legitimate use for <a href="http://ruby-doc.org/core-2.2.3/Proc.html#method-i-curry">Proc#curry</a> in a production Ruby app. Or maybe she&rsquo;s ready for the weekend, and all that&rsquo;s on her mind is &ldquo;ship it&rdquo;.</p>

<p>Whatever might be simmering below the surface, when we sit down to write code, we should take a step back and look at <em>why</em> we&rsquo;re coding in the first place. Nine times out of ten, it&rsquo;s so that we can help make money for the band of misfits we run with. We should set aside our plans for world domination and adopt a view that asks &ldquo;how can I help us succeed as a business?&rdquo; After all, that&rsquo;s why we&rsquo;re writing code.</p>

<p>Code has to work. Preferably under all kinds of conditions. The better our codebase can withstand edge cases, the less likely we are to lose business. So we should strive to write the most solid instructions to the computer that we can.</p>

<h2>2. Do What You Came To Do</h2>

<p>If you&rsquo;ve taken the time to open your editor and start writing code, there is a good reason that you&rsquo;re doing it. Whatever the specific problem you&rsquo;re trying to solve, it&rsquo;s best to stay focused on it. If your codebase is like most of the ones I&rsquo;ve seen, there&rsquo;s probably a lot of touching going on between modules, classes, services, etc.</p>

<p>Sometimes when you&rsquo;re writing a feature, you can&rsquo;t resist going down a rabbit hole. You might think: &ldquo;if only we used Active Model Serializers, I would be able to change this API response with a single line of code. I&rsquo;ll just do a quick refactor and put it in.&rdquo;</p>

<p>STOP. Maybe you&rsquo;re right. But do the thing you came to do. Make a note of your brilliant idea, and write a story for it when you&rsquo;re done with your feature so that you can give it your complete focus later.</p>

<p>Don&rsquo;t leave TODOs littered throughout the code with things you&rsquo;d like to see done later (for example, <code># Need to pull this out into a background job</code>). Write stories instead. That&rsquo;s what tracking systems are for.</p>

<p>Being present as you code can be threatened by many things. I&rsquo;ve already mentioned tempting code changes. Other threatening distractions include social media, checking the news, Slack or HipChat, and growl notifications.</p>

<p>If you&rsquo;ve never tried timeboxing (for example, with Pomodoros), I highly recommend it. Combine them with an app like <a href="https://freedom.to/">Freedom</a> or <a href="https://selfcontrolapp.com/">SelfControl</a> to keep yourself from getting pulled away, and pretty soon you&rsquo;ll find yourself able to avoid context switching for good blocks of time.</p>

<h2>3. Keep It Simple, Stupid</h2>

<p>You&rsquo;ve heard the gospel before: premature optimization is evil. Don&rsquo;t begin by writing an abstract class and subclassing when you only have one use case! If I&rsquo;m reading your code, I would much rather see magic strings and duplication between files than five levels of indirection between service objects that will take an hour to decipher.</p>

<p>When you&rsquo;re getting ready to introduce a new piece of functionality, try to solve it the easiest way you can think of first. It&rsquo;s classic TDD: red, green, refactor. That means when you&rsquo;re starting to solve a problem and you think &ldquo;this is a <em>horrible</em> way to do it&rdquo;, <em>stop yourself from trying to solve it the &ldquo;right way&rdquo;</em>. Write it horribly! Then you&rsquo;ll be able to step back and see exactly <em>why</em> it&rsquo;s horrible, and with the help of the tests you wrote along the way, you can rewrite it in a cleaner way.</p>

<p>You also don&rsquo;t always have to worry about performance right out of the gate. Solve the problem first. If performance is <em>truly</em> a concern, run some benchmarks, choose a reasonable solution, and document it so that the next person will understand what you&rsquo;re doing.</p>

<h2>4. Backspace Is Your Friend</h2>

<p>The number one thing that clients pay me for is understanding their business. I spend countless hours grokking custom DSLs, following paths of indirection, and deciphering other complexities of code. The mental overhead is usually high for getting things done. To some degree, this is unavoidable. But there is an inexpensive way to make code easier to understand, and therefore save money: delete unused code.</p>

<p>Don&rsquo;t be afraid to remove things that aren&rsquo;t getting used. If you&rsquo;re temporarily removing something, don&rsquo;t comment it out with a note like <code>TODO: put this back in after FooBar integration is complete</code>. If you&rsquo;re writing a bit of code that duplicates the functionality of something that&rsquo;s already there, pull out the old version when the new one is done. Just delete it. You can get it back, I promise. That&rsquo;s what Git is for.</p>

<p>Why should you delete it? When there&rsquo;s old, dusty code hanging around that never gets called, it confuses and scares developers. We don&rsquo;t know whether we are supposed to be using it, and we are afraid to delete it because we don&rsquo;t want to break anything.</p>

<p>If you have a decent test suite, you should be confident about pulling things out as they become unnecessary. If not, take the time to write a few integration cases. Just cover the workflows that are vital to your business. Doing so will pay huge dividends in the future, because you&rsquo;ll be able to remove dead code without fear, and keeping the project slim will make development faster in the future.</p>

<h2>5. Be Understandable</h2>

<p>Consider the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function(w, d, s, l, i) {
</span><span class='line'>   w[l] = w[l] || [];
</span><span class='line'>   w[l].push({
</span><span class='line'>     'service.start': new Date().getTime(),
</span><span class='line'>     event: 'service'
</span><span class='line'>   });
</span><span class='line'>   var f = d.getElementsByTagName(s)[0],
</span><span class='line'>   j = d.createElement(s),
</span><span class='line'>   dl = l != 'dataMonitor' ? '&l=' + l : '';
</span><span class='line'>   j.async = true;
</span><span class='line'>   j.src = '//cdn.foobar.com/script.js?id=' + i + dl;
</span><span class='line'>   f.parentNode.insertBefore(j, f);
</span><span class='line'> })(window, document, 'script', dataMonitor, id);</span></code></pre></td></tr></table></div></figure>


<p>Wat?</p>

<p>Just because you can write things succinctly doesn&rsquo;t mean you should. Code golf is fun as an exercise, but it&rsquo;s not fun to try to understand your minimal code when I&rsquo;m trying to build a business. You should name things with full words that accurately describe what is happening.</p>

<p>Writing code that&rsquo;s easy to understand is both courteous and economical. I can&rsquo;t count the number of hours I&rsquo;ve spent trying to decipher terse and cryptic blocks of code. It may seen on the surface like it doesn&rsquo;t matter how you write code <em>as long as it works</em>. But when you consider the number of hours saved across a team when code is easily understood, it&rsquo;s clear that how you write it can actually make a big difference.</p>

<h2>6. Follow The Style Guide</h2>

<p>Conventions are ways of writing that lessen the burden on the reader of having to figure out what the author intended to say. All writers have a relationship to conventions, whether it&rsquo;s strict adherence, defiance, or complete ignorance.</p>

<p>To communicate with an audience (which you are doing when you write code), knowing the conventions of your language is of the utmost importance. Writers of prose follow the strictures of Strunk and White&rsquo;s <a href="http://www.amazon.com/The-Elements-Style-William-Strunk/dp/1557427283">Elements of Style</a>.</p>

<p>By the same token, programmers should have a basic understanding of the norms in their community. Rubyists have the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>. JavaScripters are more contentious about conventions, but  the <a href="https://github.com/airbnb/javascript">AirBnB styleguide</a> and Doug Crockford&rsquo;s <a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a> are popular references. Those writing Python can run <a href="https://www.python.org/dev/peps/pep-0008/">Pep8</a> to make sure their formatting is on point automatically.</p>

<p>Whatever your world, pay attention to the community around you. If you conform to what people expect, you&rsquo;re likely to get a lot more accomplished.</p>

<h2>7. Always Include Documentation</h2>

<p>As a consultant, I spend a lot of time reading through other people&rsquo;s code. Every few months I find myself in a new context, and unless I&rsquo;m building a greenfield project, I have to ramp up on a codebase with months to years of history.</p>

<p>It&rsquo;s always surprising to me the extent to which teams rely on undocumented knowledge. When I&rsquo;m trying to get a project up and running, I always have to reach out to somebody else at the company to get past a certain snag in the set up process. The inevitable answer comes: &ldquo;oh yeah, you just need to <em>foobar</em> the <em>bazqux</em>, then it will work.&rdquo;</p>

<p>While this process does get me where I need to go eventually, a lot of time and context-switching could be saved if the necessary hack were included in the README. With clear documentation, I probably could have figured it out on my own.</p>

<p>The same thing goes for comments. In communicating the purpose complex function, class, or method, your first line of defense should be good naming and clearly written code. But when the going gets rough, a few well-placed comments can go a long way.</p>

<p>Whatever you do, leave a trail of docs behind you. Doing so is a boon to the future maintainer of your code. And who knows, it might be you!</p>

<h2>Write Code With Style and Compassion</h2>

<p>It&rsquo;s hard to understand code. The developer that comes after you will have to dig through a complicated folder structure to find your files, and when they get there they&rsquo;ll have to decipher your variable names, dig through your dependencies to find magic values, <em>and</em> try to grok how what you&rsquo;ve written stands for a real business situation.</p>

<p>To those of us writing modern, flexible languages, the possible ways to solve a problem are quite numerous. But we should realize that if we want to do our best to make our thoughts clear to whoever comes after us, our best bet is to write code as straightforwardly as we can.</p>

<p>We should strive to be humble. Leave behind the desire to write the most clever or efficient algorithm if it means sacrificing clarity. Blazing fast code has a time and place. But generally speaking, the money your company will save when the next programmer understands your code immediately will more than make up for the hundred milliseconds you would have saved by using bitmasking instead of a dictionary.</p>

<h2>Conclusion</h2>

<p>In this post, we&rsquo;ve talked about seven things to consider integrating into the approach you take to writing code. It&rsquo;s my hope that you weigh them, and perhaps call them to mind as you&rsquo;re programming. If we all do our part by choosing to write code with style, the codebases of the world will be a little cleaner, and working with computers will be a little more fun for us all.</p>

<p>Until next time, happy coding!</p>

<ol type="a">
<li><ol type="a">
<li>If the topic of code and communication interests you, I highly recommend checking out Matt Ward&rsquo;s excellent post <a href="https://www.smashingmagazine.com/2010/05/the-poetics-of-coding/">The Poetics of Coding</a>.</li>
</ol>
</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Clean Up Your JavaScript Build With Tree Shaking]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/08/15/how-to-clean-up-your-javascript-build-with-tree-shaking/"/>
    
    <updated>2016-08-15T20:29:23-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/08/15/how-to-clean-up-your-javascript-build-with-tree-shaking</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2016/tree-shaking">Engine Yard</a></p>

<p>The world of JavaScript development can be maddening and exciting. Every day, new libraries and modules are published, and it can feel overwhelming to try to keep up. On the other hand, all of this change has its benefits. As a community, we&rsquo;re heading more and more toward an ecosystem that&rsquo;s easier to work in and reason about. We keep getting new candy, and it makes our lives better!</p>

<p>One JavaScript improvement that&rsquo;s been getting some attention lately is the idea Tree Shaking. What&rsquo;s that, you ask? Simply put, it&rsquo;s a way to clean up your bundling process by excluding code you&rsquo;re not using. We all hate bloat in our projects. Unused code increases mental overhead and makes it much harder to understand what&rsquo;s going on. More importantly, it increases the size of the payload we&rsquo;re sending to users in front-end projects.</p>

<p>In this post, we&rsquo;ll take a look at tree shaking - what it is, how it works, and how to get started using it. Let&rsquo;s create a cleaner build for your JavaScript project!</p>

<h2>Where Did It Come From?</h2>

<p>The idea of tree shaking has begun gaining traction in the JavaScript world thanks to John Doe&rsquo;s <a href="https://github.com/rollup/rollup">Rollup</a> project. Rollup is a JavaScript module bundler. From early on, it supported EcmaScript 6 (ES6) modules, which resulted in its creating smaller bundles. It also supports some sweet features like cyclical requires and export bindings.</p>

<p>But perhaps the most unique feature of Rollup is the fact that it only requires modules that you&rsquo;ve actually imported somewhere. This means that unused code never makes it into the bundle. Note that this is slightly different than Dead Code Elimination. Roman Luitikov does a good job explaining this distinction in his <a href="https://medium.com/@roman01la/dead-code-elimination-and-tree-shaking-in-javascript-build-systems-fb8512c86edf#.arm0lxyhz">post about Tree Shaking</a>.</p>

<p>At this moment, a lot of people in the JS community are coalescing around <a href="https://webpack.github.io/">Webpack</a> as a build tool. Webpack&rsquo;s maintainers are currently working on a Webpack 2 release. One of its interesting features is that it will support native ES6 modules without first transforming them into a CommonJS format. This is good, because tree shaking won&rsquo;t work with CommonJS modules.</p>

<p>Recently, the estimable Dr. Axel Rauschmayer wrote a popular <a href="http://www.2ality.com/2015/12/webpack-tree-shaking.html">post</a> about setting up tree-shaking with Webpack 2. I decided to give it a try in my colleague <a href="https://twitter.com/omgwtfmarc">Marc Garreau</a>&rsquo;s <a href="https://github.com/marcgarreau/redux-starter">Redux Starter Kit</a>, to see what it would actually take to get tree shaking to work in a full project. You can see the result of my experiments on my <a href="https://github.com/fluxusfrequency/redux-starter/tree/tree-shaking">GitHub</a>.</p>

<h2>How Does It Work?</h2>

<p>The steps involved in tree shaking are fairly simple.</p>

<p>You write your ES6 code as normal, importing and exporting modules as needed. When it comes time to create a bundle, Webpack grabs all of your modules and puts them into a single file, but removes the <code>export</code> from code that&rsquo;s not being imported anywhere. Next, you run a minification process, resulting in a bundle that excludes any dead code found along the way. If you&rsquo;re curious, check Dr. Rauschmayer&rsquo;s <a href="http://www.2ality.com/2015/12/webpack-tree-shaking.html">post</a> for more details.</p>

<h2>Setting It Up</h2>

<p>Since Webpack 2 is still in beta, you&rsquo;ll need to update your <code>package.json</code> to point at the beta version. But before we do that let&rsquo;s also talk about our Babel preset. Typically, I use the <code>es2015</code> preset, but this preset relies on the <code>transform-es2015-modules-commonjs</code> plugin, which won&rsquo;t work for tree shaking. Dr. Rauschmayer pointed this out in his post. At the time of his writing, the best workaround was to copypasta all of the plugins in that preset except <code>transform-es2015-modules-commonjs</code>.</p>

<p>Thankfully, we can now get around this copy-pasta&#8217;ing by including the <code>es2015-native-modules</code> or <code>es2015-webpack</code> preset instead. Both of these presets support native ES6 modules.</p>

<p>Let&rsquo;s install Webpack 2 and the <code>es2015-native-modules</code> Babel preset by running <code>npm install --save babel-preset-es2015-native-modules webpack@2.0.1-beta</code>.</p>

<p>You should see these packages appear in your <code>package.json</code> dependencies section:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"dependencies": {
</span><span class='line'>  "babel-preset-es2015-native-modules": "^6.6.0",
</span><span class='line'>  "webpack": "^2.0.1-beta"
</span><span class='line'>  // etc.
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll also need to update your <code>.babelrc</code> file to use the new preset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  presets: ["es2015-native-modules", "react"]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Remember that we need to run a minification step during our bundle in order to take advantage of dead code elemination. Change the build script to use the <code>--optimize-minimize</code> flag on our call to the Webpack executable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// package.json
</span><span class='line'>...
</span><span class='line'>  "scripts": {
</span><span class='line'>    "build": "webpack --optimize-minimize",
</span><span class='line'>    // etc.
</span><span class='line'>  },
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Finally, update your Webpack config to make sure we&rsquo;re only listing one loader for at a time. This is for compatibility with Webpack 2, since it expects a slightly different syntax in the config.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// webpack.config.js
</span><span class='line'>...
</span><span class='line'>loaders: [
</span><span class='line'>  {
</span><span class='line'>    test: /\.jsx?$/,
</span><span class='line'>    exclude: /node_modules/,
</span><span class='line'>    loader: 'babel',
</span><span class='line'>    include: __dirname
</span><span class='line'>  },
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h2>Taking It For A Spin</h2>

<p>Now we have everything we need in place to run a build with tree shaking. Let&rsquo;s try it out!</p>

<p>To make sure everything is working, we&rsquo;ll need to export some modules that we&rsquo;re not importing. In my example, I decided to create some useless functions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// place-order.js
</span><span class='line'>
</span><span class='line'>export function makeMeASandwich() {
</span><span class='line'>  return 'make sandwich: operation not permitted';
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export function sudoMakeMeASandwich() {
</span><span class='line'>  return 'one open faced club sandwich coming right up';
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Then in my actual project code, I only imported and used one of them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// index.js
</span><span class='line'>
</span><span class='line'>import { sudoMakeMeASandwich } from './place-order.js';
</span><span class='line'>sudoMakeMeASandwich();
</span></code></pre></td></tr></table></div></figure>


<p>When we run <code>npm run build</code>, we should end up with a minified build that excludes the <code>makeMeASandwich</code> code. When you run this command, you&rsquo;ll see an output that accounts for removed modules. In my example, I saw a bunch of warnings from dependencies such as React and Webpack Hot Middleware. I left a few of them in the pasted output below, but the line that&rsquo;s of most interest of us is <code>Dropping unused function makeMeASandwich</code>, since that&rsquo;s the code we&rsquo;re checking on.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WARNING in bundle.js from UglifyJs
</span><span class='line'>...
</span><span class='line'>Dropping unused function makeMeASandwich [./src/place-order.js:1,16]
</span><span class='line'>...
</span><span class='line'>Dropping unused variable DOCUMENT_FRAGMENT_NODE_TYPE [./~/react/lib/ReactEventListener.js:26,0]
</span><span class='line'>Condition always true [./~/style-loader!./~/css-loader!./~/sass-loader!./src/assets/stylesheets/base.scss:10,0]
</span><span class='line'>Condition always false [(webpack)-hot-middleware/process-update.js:9,0]
</span><span class='line'>Dropping unreachable code [(webpack)-hot-middleware/process-update.js:10,0]</span></code></pre></td></tr></table></div></figure>


<p>Now if we open up the minified bundle and search for the contents of the <code>makeMeASandwich</code> function, we won&rsquo;t be able to find it. Indeed, searching for <code>make sandwich: operation not permitted</code> yields no results. It works for <code>one open faced club sandwich coming right up</code>, though. Success!</p>

<h2>Going Further: Shaking Dependencies</h2>

<p>Removing your own unused code is all well and good, but it&rsquo;s probably only going to be a drop in the bucket of your overall bundle. The place where tree shaking really shines is in helping remove usused code from dependencies. If you&rsquo;re pulling in a whole package, but only using a single export from it, why would you send the rest of the package to your users?</p>

<p>Roman Luitikov&rsquo;s <a href="https://medium.com/@roman01la/dead-code-elimination-and-tree-shaking-in-javascript-build-systems-fb8512c86edf#.42821257h">post</a> did a great job of walking through what it looks like to tree shake a dependency by showing what happens if you pull in Lodash, but only import and use the <code>first</code> function. The rest of Lodash gets thrown out, and the resulting build is much smaller!</p>

<p>Since Roman has already covered this, I won&rsquo;t go into the details of what that looks like here, but you can see it in my <a href="https://github.com/fluxusfrequency/redux-starter/commit/6ba1ee1455935a8aec054c3a587b0a93d683be5c#diff-1fdf421c05c1140f6d71444ea2b27638R20">example</a> if you&rsquo;re curious.</p>

<p>The main point to understand is that when you consider the sizeable amount of unused code that ends up in a typical JS project when you run <code>npm install</code>, removing it with tree shaking can yield huge savings on bundle size.</p>

<h2>Conclusion</h2>

<p>Being a front-end JavaScript developer comes with a specific set of concerns. Because you&rsquo;re sending a large amount of code execution off onto your user&rsquo;s browser, the size of your payload can get really large. We do our users a huge service by being sensitive to the amount of data that we&rsquo;re sending them.</p>

<p>Tree shaking offers a great way to cut down on your bundle size, and it&rsquo;s easy to get set up in your existing project. I&rsquo;m excited to see how this practice evolves as more of the community begins to embrace it and Webpack 2 is released. In the meantime, I would recommend reading up on some other <a href="https://github.com/webpack/webpack/tree/master/examples/harmony-unused">examples of tree shaking</a> and more of the <a href="https://gist.github.com/sokra/27b24881210b56bbaff7">features coming in Webpack 2</a>.</p>

<p>Until next time, happy coding!</p>

<ol type="a">
<li><ol type="a">
<li>If you decide to give tree shaking a try in your existing project, we&rsquo;d love to hear how it goes. Leave us a comment!</li>
</ol>
</li>
</ol>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Choose The Right Tech Stack For Your App]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/04/25/how-to-choose-the-right-tech-stack-for-your-app/"/>
    
    <updated>2016-04-25T05:26:07-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/04/25/how-to-choose-the-right-tech-stack-for-your-app</id>
    
    <content type="html"><![CDATA[<p>Whether you&rsquo;re bootstrapping a startup or the overseer of a tech empire, there comes a time when you have to make tough decision. You&rsquo;re getting ready to build (or rebuild) a new application that will be vital to your company&rsquo;s continued success. What tools should you use?</p>

<p>As consultants at Quick Left, clients ask us to help them make this decision regularly. We&rsquo;ve worked alongside many businesses as they found their way to success. We&rsquo;ve also worked with a wide array of languages and frameworks. One thing we&rsquo;ve learned from these experiences is that using the wrong technology can set you back by weeks or months at best, which is both costly and risky from a business point-of-view. On the other hand, placing a good bet makes it easier to scale and grow.</p>

<p>There are a lot of things to consider when trying to choose the right tech stack for your app. In this post I&rsquo;ll walk you some of the things I usually consider when making a recommendation.</p>

<h2>Some Basic Things to Consider</h2>

<p>The first questions to ask yourself when making this decision are the same ones you would consider when thinking about your <a href="https://quickleft.com/blog/ux-is-not-just-ui/">User Experience</a>. Before you decide <em>how</em> you&rsquo;ll build your app, you&rsquo;ll want to decide what <em>kind</em> of app you&rsquo;re building.</p>

<p>Who is your user base? What&rsquo;s their demographic? Are they young? Old? Urban? Rural? Comfortable with technology? More importantly, do you expect them to access your application from their mobile device, desktop computer, or something else? Knowing whether you need a mobile or web application, or both, will narrow down your choices of tech quite a bit.</p>

<p>Another consideration is whether what you are making is very similar to an existing application, a riff on a known paradigm, or something the world has never seen before. If your customers are used to a native mobile experience, you will probably want to choose a native technology, such as Objective C, Swift, or Java. If you&rsquo;re trying to bring a desktop-style experience to the web, you&rsquo;ll probably be looking at a single page app with a JavaScript heavy front-end and a modern framework like <a href="https://facebook.github.io/react/">React</a> or <a href="https://angularjs.org/">Angular</a>.</p>

<p>Finally, think about your timeline. Do you need to get to market as fast as possible, or do you have time to build something with a little more lasting power? Some technologies, like WordPress and Ruby on Rails, are great for getting a product out the door as quickly as possible. Others, like Go and Scala are great at solving certain problems like scalability and performance, but will take a little longer to build.</p>

<p>Answering these basic questions about your business will help narrow down the technologies you need to look at. After you&rsquo;ve thought about them, I recommend considering the character of your company.</p>

<h2>What Stage is Your Company In?</h2>

<p>The tech field is home to companies of all shapes and sizes, from two guys in a basement to global corporations with hundreds of divisions. Where do you fall in the spectrum? The answer to that question has huge implications. It will shape how you structure your budget, what you do to try to draw new customers, and how you present your brand.</p>

<p>When it comes to choosing the right tech stack for your app, the size and positioning of your company is also of great importance. Let&rsquo;s take a look at the appropriate tech stack for companies of a few different sizes.</p>

<h3>Basement Bootstrappers</h3>

<p>You&rsquo;ve got a great idea and you&rsquo;re sure it&rsquo;s going to make you bags of cash. Maybe this is your first rodeo, maybe not. Either way, your goal is clear: get it built, and get it in front of people so that you can prove your concept.</p>

<p>For tech companies in this early stage, it&rsquo;s vital for adding features to be cheap and quick. You&rsquo;re almost certainly following an <a href="https://blog.engineyard.com/2015/actually-mvp">MVP process</a>, which means you&rsquo;re going to be throwing a lot of work out.</p>

<p>When you know that your code is disposable, you&rsquo;ll want to use the easiest tool you can find. Some good choices include <a href="https://wordpress.org/">WordPress</a>, basic PHP, or a static site generated with <a href="https://jekyllrb.com/">Jekyll</a> or <a href="http://harpjs.com/">HarpJS</a>. All of these technologies are easy to understand, and you can probably get started with them yourself even if you&rsquo;re not especially technical.</p>

<p>In some cases, you might already know that you need to build something that will last a little while. If you&rsquo;ve already proven your concept in a basic way, and need to set up a solid base that you can easily extend from, but you&rsquo;re still very young, you might want to consider using <a href="http://rubyonrails.org/">Ruby on Rails</a> or <a href="https://www.djangoproject.com/">Django</a>. Both frameworks are easy to build new features in. Plus, they have the added bonus of being widely known, which means you will find it easier to hire new developers to work on your code as you continue to grow.</p>

<h3>Proven Market</h3>

<p>If you&rsquo;ve been in the game for a while, and you know you&rsquo;re on to something with your core offering, you&rsquo;ll want to approach your choice a little differently.</p>

<p>If you&rsquo;ve made it to this point, there&rsquo;s a pretty good chance that you&rsquo;ve done so via an easy-to-use technology. Perhaps WordPress or a static site. Maybe you find yourself needing to add new features at a quick pace, but the tech stack you&rsquo;ve been using is proving cumbersome. It was great for building a basic interface, but setting up custom features requires you to stretch it beyond its intended purpose.</p>

<p>At this point, you may well make the choice to switch to a new framework. You should think about your strategy. Are you planning to add a few more core features and work on refining them, or are you going to be doing a lot of experimentation for the foreseeable future?</p>

<p>If you think you know where you&rsquo;re headed, and your main concern is scalability and stability, you might skip past flexible frameworks like Ruby on Rails and go straight for something beefier like <a href="https://golang.org/">Go</a> or <a href="http://www.scala-lang.org/">Scala</a>. However, that can sometimes be a pretty big risk. You&rsquo;re basically betting that your business will stay mostly the same for the foreseeable future, because developing in the beefier languages takes more time and money. Still, picking one of these more &ldquo;industrial strength&rdquo; solutions is the way to go if you want to build something that will last.</p>

<p>On the other hand, if you want to keep playing with secondary features as you go, you might switch to something like Rails, or Django. These technologies will give you the opportunity to play around as much as you like. The risk you take in going this direction is that you will end up with a lot of spaghetti code, because these technologies are so flexible that you can say the same things in many ways, and your developers inevitably will do just that. If you continue down this path, maintenance will get more and more challenging as time goes on.</p>

<p>Of course, you may find that you don&rsquo;t need to make a switch yet at all. If your current stack is meeting your needs, stick with it! Delay switching as long as you reasonably can, because there&rsquo;s a pretty strong chance that <a href="http://martinfowler.com/bliki/Yagni.html">You Ain&rsquo;t Gonna Need It</a>!</p>

<h3>Established and Growing</h3>

<p>The next stepping stone of growth after you&rsquo;ve proven your market and continued to grow it comes when you reach the point of being quite well-known and having tons of users. You probably have a code base that has a lot of technical debt, because the strain of doing what&rsquo;s needed to keep the business strong and growing usually necessitates making some sacrifices in the quality of your code.</p>

<p>At this point, your main concerns are paying off tech debt, making maintenance and development faster, and scalability under load.</p>

<p>This is the moment when most companies begin to consider the benefits of doing <a href="http://programmers.stackexchange.com/questions/6268/when-is-a-big-rewrite-the-answer">the Rewrite</a>. The rewrite is an expensive, multi-month process in which your product&rsquo;s existing functionality is coded from scratch with a new tech stack (and usually, UI), then switched out. It&rsquo;s &ldquo;Your Company 2.0&rdquo;.</p>

<p>At this point, you need to decide on your organizational architecture. Will you go toward a micro-services or other <a href="http://fluxusfrequency.github.io/blog/2014/02/14/service-oriented-architecture/">Service-Oriented Architecture</a>? If so, consider the difficulty of making sure that there is clear encapsulation and well-defined APIs for each of your services. Perhaps you want to stick with a <a href="https://m.signalvnoise.com/the-majestic-monolith-29166d022228#.deg42umkz">monolith</a>, but it&rsquo;s time to start over and apply the lessons you&rsquo;ve learned. Or, maybe you want to move from a server-rendered page style app to a JavaScript heavy client-side app.</p>

<p>If you have an established and growing business and you find yourself facing this decision, you should definitely consult with an experienced system architect and weigh the benefits and drawbacks of each approach you&rsquo;re considering. Because the rewrite is an expensive and time-intensive process, it greatly weakens your ability to add new features while it&rsquo;s going on. Having the guidance of an skilled architect will help mitigate the cost and risk of making the switch-over.</p>

<h3>Evaluating Technologies</h3>

<p>At this point, you&rsquo;ve asked some basic questions about what kind of experience you want to provide your users, and you&rsquo;ve identified what type of company you have. Hopefully this process has helped you generate a list of potential technologies. Before we conclude, let&rsquo;s take a moment to gauge each choice on its own merits.</p>

<p>Drawing from my colleague Laura Steadman&rsquo;s article on <a href="https://quickleft.com/blog/evaluating-open-source-libraries-five-questions-to-ask/">Evaluating Open Source Libraries</a>, I&rsquo;ve created a list of questions to ask when you&rsquo;re looking at a tool that you might like to use.</p>

<ul>
<li>Is it well-documented?</li>
<li>Is there an active community around it?</li>
<li>If it&rsquo;s a new framework, how quickly is it changing?</li>
<li>Does it have a corporate backer? If so, what is their track record in supporting technologies?</li>
<li>Is it easy to test?</li>
<li>How difficult will it be to hire developers to work on it?</li>
<li>What does the ramp-up time for learning it look like?</li>
<li>Is there something unique about your business needs that only this technology can provide?</li>
<li>When it comes to hosting and DevOps, do you have resources available to support changes on your own, or does it make sense to pay for a Platform as a Service provider like <a href="https://www.heroku.com/">Heroku</a> or <a href="https://engineyard.com/">Engine Yard</a>?</li>
</ul>


<h2>Conclusion</h2>

<p>When you&rsquo;re piloting a tech business, there are certain touchstone moments where the decisions you make can make or break your future success. Choosing the right tech stack for your app is one of these moments. In this post, we&rsquo;ve looked some strategies you can use when making this choice.</p>

<p>First, we thought about the demographics and experience you want to provide. Next, we considered where your business is in its overall lifecycle. Finally, we went down a checklist and asked questions to evaluate how appropriate each of your choices was.</p>

<p>If you&rsquo;re facing this decision, I hope this post has helped you face the question with a little more rationality and forethought. Best wishes for your business and success!</p>

<p>Until next time, happy hacking!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Why We Use Test-Driven Development (TDD)]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/02/29/why-we-use-test-driven-development-tdd/"/>
    
    <updated>2016-02-29T04:25:52-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/02/29/why-we-use-test-driven-development-tdd</id>
    
    <content type="html"><![CDATA[<p>When you’re getting ready to build an application, there are many choices to be made. Will you choose to build it as cheaply as possible, then hope that things work out down the line? Or do you need something more resilient?  If so, spending the time and money to build a quality application will pay off.  Code written with craftsmanship will withstand the tests of time, changing business requirements, and user error.</p>

<p>At Quick Left, we believe that it&rsquo;s worth taking the time to build things right. A well-written codebase saves time and money, and withstands the test of time. On the other hand, we&rsquo;re also interested in doing things efficiently. If there&rsquo;s a way to write quality code <em>and</em> save time and money, that&rsquo;s the kind of service we want to provide for our clients. That&rsquo;s why we use Test-Driven Development.</p>

<h2>What Is TDD?</h2>

<p>Test-Driven Development is an approach to writing software in which the developer uses specifications to shape the way she implements a feature. For short, we describe it as the &ldquo;red-green-refactor cycle&rdquo;. Before writing any code adding new functionality to an application, she first writes an automated test describing how the new code should behave, and watches it turn red (fail to pass). She then writes the code to the specification, and the test turns green (it passes). Finally, the developer takes a little time to make sure that the code just written is as clean as possible (refactor).</p>

<p>If you&rsquo;d like to get a sense of what Test-Driven Development looks like in action, read my post about <a href="https://quickleft.com/blog/wrapping-your-api-in-a-custom-ruby-gem/">creating a custom Ruby gem</a>, where I walk through the process step by step.</p>

<p>TDD has long been a favorite approach of organizations that follow <a href="http://www.extremeprogramming.org/">Extreme Programming</a> and Agile principles. In 2003, Kent Beck wrote <a href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530">the book</a> on this approach. In the years since, TDD has enjoyed enormous success, being elevated to near-dogmatic status.</p>

<p>In the past couple years, some have raised concerns that the programming community is being too strict in its demand for TDD. Most notably David Heinemeier Hansson (creator of Ruby on Rails), wrote a blog post entitled <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead. Long live testing.</a>, which was met with passionate reactions from people on both sides of the argument.</p>

<p>At Quick Left, we continue to use TDD in our daily work. Experience has shown that it&rsquo;s the fastest, most reliable way to set our clients up for success. TDD consistently produces well-structured codebases that are well-structured, resilient, and easy to make changes to as business requirements evolve.</p>

<h2>What Are The Benefits?</h2>

<p>What are the specific ways that a test-driven approach can benefit your business?</p>

<ol>
<li>It Works The Way You Wanted It To</li>
</ol>


<p>If computer systems built themselves, they would probably be perfect. Unfortunately, computers need people to tell them what to do, which means humans have to communicate to get software written. If you&rsquo;ve worked in tech for any length of time, you&rsquo;ve probably experienced the frustration of a mismatch between what was envisioned in planning and how an app actually behaves in the wild.</p>

<p>TDD helps alleviate this problem, because the test serves as a specification for what the code to be written should <em>do</em>. As long as you&rsquo;re <a href="https://blog.engineyard.com/2015/happy-sad-evil-weird-feature-planning">writing good stories</a>, your development team should be able to build exactly what you asked for. If your team agrees to use <a href="https://en.wikipedia.org/wiki/Test-driven_development#TDD_and_ATDD">Acceptance Test-Driven Development</a>, you can even write tests that describe how you want it to work in plain English!</p>

<ol>
<li>Your Code Will Read Like Poetry</li>
</ol>


<p>Because <a href="http://fluxusfrequency.github.io/blog/2014/01/10/refactoring-1-extract-method/">refactoring code</a> is a built-in step in TDD, you end up with a much cleaner codebase as you go. Apps built with TDD tend to have less duplication, fewer edge cases that aren&rsquo;t thought through, and a better overall architecture.</p>

<p>Why should you care if the code is pretty or not? It makes it easier to add features, fix bugs, and get up to speed. Every time you <a href="https://quickleft.com/">hire a consultant</a> or new developer, they have to spend a certain amount of time understanding how the different parts of your application interact. This <a href="https://quickleft.com/blog/ramping-up-developers-on-code/">ramping up process</a> takes much less time when the code is well-structured. Similarly, programmers can make changes (whether features or bugs) much more quickly when there&rsquo;s less mental overhead to struggle with.</p>

<ol>
<li>You Can See Trouble A Mile Away</li>
</ol>


<p>Whether you decide to adopt TDD for the quality behavior or the squeaky-clean code, you&rsquo;ll enjoy this nice side benefit as well: you&rsquo;ll have a comprehensive test suite! That means that just about every line of code in your application will be covered by a test, and the entire thing can be checked automatically in a matter of minutes.</p>

<p>The benefit of a comprehensive test suite is that it alerts you to changes early. For example, if your checkout flow stops charging users&#8217; credit cards (eek!), you&rsquo;ll know it right away, because the tests will fail. It also means that if somone makes a mistake and something doesn&rsquo;t work the way it was supposed to, it will be obvious. That&rsquo;s good, because it will give you a chance to fix it before it goes to production. If it becomes necessary down the road, you can even start a campaign of deep refactoring without fear, because you&rsquo;ll have an ironclad test suite that will remain green.</p>

<ol>
<li>It Saves You Money</li>
</ol>


<p>In my experience working with <a href="https://quickleft.com/casestudies/">our clients</a>, companies often spend a lot more money adding features to their application than is really necessary.</p>

<p>One of the main causes of slow development is miscommuncation between product owners and developers. Too often, we experience the reality of mismatched expectations, and it feels like this cartoon:</p>

<p><img src="http://www.cvr-it.com/images/PM_Build_Swing.gif" alt="" /></p>

<p>The PO asks for one thing, the developer builds something else. Then cycles are wasted going back to fix the feature, when it could have just been built correctly in the first place. By translating business requirements into specs before writing any code, you can ensure that what you want is actually what gets built.</p>

<p>Another huge time sink in development is an over-complicated codebase making it difficult to make changes safely. When code is complicated, it gets much harder to get anything done, because one little change over here can result in a big problem over there. When following TDD, developers can make changes with confidence and your QA team will catch fewer regressions.</p>

<p>Both of these time sucks cost our industry innumerable amounts of money every year. If we just adopted a TDD approach, much of this money could be spent on new innovations instead.</p>

<h2>Conclusion</h2>

<p>Hopefully you now have a better idea of what the red-green-refactor cycle is, and why we use Test-Driven Development at Quick Left. There&rsquo;s no better way to save time and money <em>while</em> making sure that you have a codebase that&rsquo;s maintainable, extensible, and resistant to change. Whatever you&rsquo;re cooking up, I hope you seriously consider making TDD a part of your company&rsquo;s culture, because the benefits are so numerous and strong!</p>

<p>Best of luck.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Five Hacks To Level Up Your Learning As A Developer]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/02/12/five-hacks-to-level-up-your-learning-as-a-developer/"/>
    
    <updated>2016-02-12T04:25:29-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/02/12/five-hacks-to-level-up-your-learning-as-a-developer</id>
    
    <content type="html"><![CDATA[<p>Lately, I&rsquo;ve been thinking a lot about how I learn. I was a teacher before I started programming, so I spent many hours studying how people learn. Since being a developer involves constantly staying on top of the latest technologies, I&rsquo;ve turned these strategies on myself in service of learning more, faster.</p>

<p>In a <a href="https://quickleft.com/?p=2790">previous post</a>, I introduced the concept of Metacognition and talked about a process called metacognitive regulation, which you can use to get the most out of your learning sessions. In this post, I&rsquo;ll share some more tactical approaches that you can use to level up your learning as a developer.</p>

<h2>1. Know Your Learning Style</h2>

<p>Before you start applying learning strategies, it&rsquo;s good to establish a baseline understanding of how you learn. One of the easiest ways to start this work is to find out your learning style.</p>

<p>You may have heard of the three learning modalities proposed by <a href="https://en.wikipedia.org/wiki/Learning_styles">Walter Burke Barbe et al</a>: Visual, Auditory, and Kinesthetic. Just about everyone can learn from all of these approaches, but we&rsquo;re also more or less attuned to each of them. You can find out where you fall by taking an <a href="http://www.educationplanner.org/students/self-assessments/learning-styles.shtml">online quiz</a>. It only takes ten minutes, and is applicable throughout your life.</p>

<p>Here are some ways to use each modality when learning technology:</p>

<p>Visual learners can scan project directory structures, sketch ERD and other architectural diagrams, watch screencasts, and read through source code.</p>

<p>Auditory learners might learn well by listening to podcasts, watching conference talks on YouTube, and reading documentation aloud.</p>

<p>Kinesthetic learners will feel most at home working through tutorials, experimenting with demo projects, and doing hardware projects.</p>

<p>Keep in mind that you might benefit from a mixture of approaches. Looking at things from a variety of approaches can give you a more in-depth understanding of what is going on.</p>

<h2>2. Consider Finding A Mentor</h2>

<p>This might be obvious, but one of the easiest ways to level up is by working with someone who already knows what you want to learn. For extroverts, it may work better than studying alone ever could. Even if you&rsquo;re an introvert, <a href="https://quickleft.com/blog/mentoring-in-programming-what-why-and-how-series/">working with a mentor</a> can be a great idea.</p>

<p>There are several strategies a mentor can take to help you learn. They can suggest thought exercises or prompts for you to work on, review your code, and explain how higher level concepts fit together.</p>

<p>But perhaps the most valuable thing a mentor can do is <a href="https://quickleft.com/blog/to-pair-or-pair-that-is-the-question/">pair program</a> with you. Asking questions and making suggestions while an experienced programmer thinks through and solves a problem in a new language or framework is an illuminating experience. If you can think of anyone who knows about what you want to learn, consider asking them to work with you. Even a one-hour session can take you leaps and bounds beyond your current capabilities.</p>

<h2>3. Timeboxing</h2>

<p>When I was a bootcamp student, my instructor <a href="https://twitter.com/j3">Jeff Casimir</a> taught us on a <a href="http://pomodorotechnique.com/">Pomodoro</a> schedule, and encouraged us to take the same approach in our project work and individual learning. We would focus on a single aspect of the curriculum for 25 minutes, while avoiding distractions completely. Then we&rsquo;d take a 5 minute break where we would completely switch context.</p>

<p>By the end of the program, I was Pomodoroing my way through my entire 14 hour day, only dropping the practice for meals and an afternoon walk. Of course, this was an extreme application of timeboxing. I was trying to cram as much knowledge and experience into my head as I could. But I still turn to <a href="http://capablehands.net/menubarcountdown">Menubar Countdown</a> whenever I want maximum efficiency.</p>

<p>If you haven&rsquo;t tried timeboxing, I&rsquo;d recommend giving it a shot for a couple hours. I&rsquo;ve found it most effective when you&rsquo;re strict about removing distractions like company chat, text messaging, and social media. It&rsquo;s also good to set an intention at the beginning of each work session.</p>

<p>Timeboxing as you learn keeps you focused on finding out what you want to know, without getting dragged down rabbit-holes or spending more time than intended on a topic.</p>

<h2>4. Reading Strategies</h2>

<p>Education research has produced a deep wealth of strategies for learning over the past 30 years. In that time, the one discipline that has been studied and thought about the most is probably reading. Being a strong reader is a crucial skill for effective learning. Reading code is no exception.</p>

<p>When I first started working as a developer, the importance of reading source code was the first thing I learned. When your application relies on outside packages and libraries, it&rsquo;s sometimes the only way to track down puzzling bugs. At the same time, reading through source can be a great way to get to know the idioms being used in your community. I personally like to follow what&rsquo;s going on with <a href="https://groups.google.com/forum/#!forum/rubyonrails-core">Ruby on Rails</a>, because the community is always active and pushing the boundaries of what Rails can do.</p>

<p>There are a couple of reading strategies that you might find helpful when you&rsquo;re trying grok a new technology.</p>

<p>The first is called <a href="https://teal.ed.gov/sites/default/files/Fact-Sheets/10_TEAL_Self_Reg_Strat_Dev_0.pdf">RAP</a>, or Read, Ask, Paraphrase. In this approach, you make an effort to monitor your understanding as you go along. The procedure is fairly simple: begin by reading a unit of text (a paragraph, for example). When you&rsquo;re done, ask yourself about what you&rsquo;ve read. What is the topic? What are the key points? What are the most important details? What&rsquo;s the author&rsquo;s attitude toward the topic? Finally, try to summarize what you&rsquo;ve read to yourself. If you&rsquo;re struggling, that&rsquo;s a flag that you haven&rsquo;t fully digested what you&rsquo;ve read. It can also be helpful to perform this process at a higher level as well, paraphrasing a complete article or module of source code once you&rsquo;ve read it.</p>

<p>The other strategy you might like to try is to approach the questions you ask yourself from a higher level of thinking. There&rsquo;s a model of thinking called <a href="https://teal.ed.gov/sites/default/files/Fact-Sheets/12_TEAL_Deeper_Learning_Qs_complete_5_1_0.pdf">Bloom&rsquo;s Taxonomy</a> that lists levels of questioning according to the level of cognitive demand. The more recent version of Bloom&rsquo;s Taxonomy begins with remembering as the easiest level, then progresses through understanding, applying, analyzing, evaluating, finally coming to creating as the most demading level.</p>

<p>A key idea with this model is that as you engage in higher levels of thinking, you necessarily employ the levels below it as well. That means that if you are <em>creating</em> something, you&rsquo;ll also need to engage remembering, understanding, analyzing, and evaluating. Although it&rsquo;s suggested that you approach the material from a variety of levels, a study conducted in 1981 showed that using more higher-level questioning leads to better factual recall and application of thinking skills.</p>

<p>Here are some specific ways you can apply higher levels of thinking when learning tech.</p>

<p>When you&rsquo;re trying to understand <em>why</em> something is done a certain way, ask for evidence. How do you know that a linked list is more performant than an array? Look at a benchmark!</p>

<p>You should also ask for clarification. Find out how the details work. Don&rsquo;t be satisfied that something works, find out <em>how</em>.</p>

<p>Make connections between what you&rsquo;re learning and what you already know. For example: &ldquo;I know how to use Rake in Ruby to run builds and utility tasks. How do I solve that problem in JavaScript?&rdquo;</p>

<p>Ask hypothetical questions. If you learn how to use a certain method, ask yourself: &ldquo;what would happen if I passed it nil instead?&rdquo; The answers to thought experiments like these can really illuminate the inner workings of an API.</p>

<p>Similarly, you can consider cause and effect. &ldquo;What is likely to be the effect if I do X?&rdquo;</p>

<p>Finally, engage in some self-reflection after reading by summarizing what you&rsquo;ve learned. Ask yourself for one or two key points at the end of each learning session. Say them out loud, or <a href="https://quickleft.com/blog/write-technical-blog-post-part-1/">write a blog post</a> about them. Ask yourself what still feels unresolved - what do you <em>not</em> understand? That can give you a good jumping-off point in what to look at during your next session.</p>

<h2>5. Visual Learning Aids</h2>

<p>In addition to reading strategies, education research has produced a large number learning aids with a proven track record of success. You may have used some of these when you were in school and forgotten about them. Why not try experimenting with them again as an adult?</p>

<h3>KWL Chart</h3>

<p>The <a href="https://teal.ed.gov/sites/default/files/Fact-Sheets/12_TEAL_Deeper_Learning_Qs_complete_5_1_0.pdf">KWL Chart</a> is a great way to guide yourself in prioritizing what you want to learn about. The acronym stands for &ldquo;Know&rdquo;, &ldquo;Want to Know&rdquo;, and &ldquo;Learned&rdquo;.</p>

<p>To use a KWL chart, make three columns on a piece of paper or electronic document, and give them headings of &ldquo;K&rdquo;, &ldquo;W&rdquo;, and &ldquo;L&rdquo;.</p>

<p>When you begin a learning session, choose a topic. Before you read anything about it, brainstorm words, terms, and phrases representing what you already know about the topic, and record these in the &ldquo;K&rdquo; column.</p>

<p>Next, ask yourself what you think you&rsquo;d like to know about the topic and record it in the &ldquo;W&rdquo; column. In this step, you are setting your intention for your learning. You&rsquo;re also giving yourself a map of the things you need to focus on. As you begin to do your research, you can always add more things to the &ldquo;W&rdquo; column to investigate later on.</p>

<p>Finally, as you read about your chosen topic, record what you find out in the &ldquo;L&rdquo; column. This isn&rsquo;t a place to take extensive notes. Just write down key phrases that will help you remember the broader concepts you learned about.</p>

<h3>Venn diagram</h3>

<p><a href="https://en.wikipedia.org/wiki/Venn_diagram">Venn diagrams</a> are a widely known way to explore the relationship between two different sets of data. When it comes to learning, they can be really helpful for understanding the distinction between two languages or frameworks.</p>

<p>For example, imagine you are a front-end JavaScript developer with experience in Backbone, and you are trying to learn Angular. You might draw a Venn diagram with Backbone in one circle, and Angular in another. To begin, you could fill in some of the things you know about Backbone in its circle. You might write down &ldquo;models automatically integrate with a REST API&rdquo;. Then as you read about Angular, you can fill in its circle. You might write &ldquo;ngModel reflects data between the DOM and scope directive&rdquo;. In the middle, you can record things that they share. For example, &ldquo;AJAX requests wrapped by internal library with convenience methods that return a promise&rdquo;.</p>

<p>This tool might seem superfluous at first. What&rsquo;s the point of writing it down if you already understand the distinction? But having everything laid out in front of you visually can really help you get a mental map of the relationship between concepts. Also, approaching your research with a mind that&rsquo;s looking for similarities and differences in relation to something you already know activates your prior knowedge. And it can lead you to ask different questions than you might have otherwise.</p>

<h3>Concept Map</h3>

<p>Another diagram that might be familiar to you is the <a href="https://en.wikipedia.org/wiki/Concept_map">Concept Map</a>. A concept map is basically a bunch of boxes connected by arrows. You connect the boxes from top to bottom with arrows that represent causation.</p>

<p>When I first began to study computer programming, I was struck by how similar the evaluation of a program is to the playing of a piece of written music. A program reminds me of <a href="https://en.wikipedia.org/wiki/Impressionism_in_music">Impressionistic Music</a>, where the same idea shows up in different contexts as a piece progresses.The &ldquo;playing&rdquo; of a program involves the computer interpreting the current line of code, and every time it encounters a variable or method call it hasn&rsquo;t seen yet, it finds the named variable and interprets it in the current context.</p>

<p>Following this line of unfolding logic, we begin to discover lines of causation in our programs. Drawing these threads as a concept map paints a picture of the whole that you would not see otherwise.  Once you have that bigger perspective, it&rsquo;s easier to understand where to look for bugs as they crop up, and know what to do first when you&rsquo;re trying to build a new feature.</p>

<h2>Conclusion</h2>

<p>Knowing your own learning process is a great way to make sure you&rsquo;re spending your time wisely when you sit down to investigate new technologies. Once you&rsquo;ve established a baseline, the hacks we&rsquo;ve looked at here can be a great boost level up your learning as a developer.</p>

<p>In this post, we&rsquo;ve talked about finding out your learning style, finding a mentor, timeboxing, using reading strategies, and visual learning aids as quick wins you can leverage to learn more, faster.</p>

<p>I hope you try some of these and find them of some benefit. Best of luck!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Learn Best As A Developer]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2016/02/08/how-to-learn-best-as-a-developer/"/>
    
    <updated>2016-02-08T04:25:12-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2016/02/08/how-to-learn-best-as-a-developer</id>
    
    <content type="html"><![CDATA[<p>At Quick Left, we spend a lot of time thinking about how we learn.</p>

<p>As consultants, we find ourselves in a new code base, or coming to terms with a new business domain, on a regular basis. <a href="https://quickleft.com/blog/ramping-up-developers-on-code/">Getting ramped up on code</a> is the name of the game, so effective learning is an essential skill for us.</p>

<p>Even if you&rsquo;re not a consultant, knowing the lay of the land when it comes to the latest and greatest technologies is essential if you&rsquo;re a developer. Programmers spend a lot of cycles tinkering with &ldquo;the new hotness&rdquo;. For every framework or language that does eventually see some level of success, many others fail. Because of this, we inevitably invest some time learning things we&rsquo;ll never use. It&rsquo;s important to be efficient in our learning, to minimize wasted time and effort.</p>

<p>Other programmers ask me about some of the strategies I use in my own learning. Because I used to be a teacher, I&rsquo;ve spent a fair amount of time thinking about how people learn. In this post, we&rsquo;ll talk about how to examine your process so that you can figure out how learn best as a developer.</p>

<h2>Introducing Metacognition</h2>

<p>In education research, there&rsquo;s a term called <a href="https://en.wikipedia.org/wiki/Metacognition">metacognition</a>. It means being aware of your own knowledge and being able to think critically about <em>how you think</em>. The U.S. Department of Education&rsquo;s <a href="https://teal.ed.gov/">TEAL project</a> has many great resources exploring the topic. This <a href="https://teal.ed.gov/tealguide/metacognitive">article</a> gives a good primer on the specifics of researchers break metacognition down.</p>

<p>To simplify, we can talk about two main aspects of metacognition: metacognitive knowledge and metacognitive regulation.</p>

<p>Metacognitive knowledge means what you know about yourself as a learner and how you approach problem solving.</p>

<p>Metacognitive regulation refers to ways that you hack your process to help control the outcome of your learning.</p>

<p>When you&rsquo;re beginning the process of examining your learning, it can be helpful to begin by establishing a baseline of metacognitive knowledge. We&rsquo;ll take a look at one of my favorite tools for doing this, finding out your learning style, in a future article.</p>

<p>Once you have a basic idea of how you learn, you can begin apply metacognitive regulation strategies to level up your learning. As you continue to use these strategies, you will expand your self-understanding as a learner (increasing your metacognitive knowledge).</p>

<h2>Using Metacognitive Regulation</h2>

<p>Let&rsquo;s take a look at how to apply metacognitive regulation to improve your learning.</p>

<p>There are a number of activities you can use to regulate your learning, and just about all of them fit within the following pattern: identifying intention at the outset of learning, checking in with yourself throughout the process of learning, and summarizing the result afterwards. Educational research summarizes these three phases by labelling them Planning, Monitoring, and Evaluating.</p>

<p>For the remainder of this article, we&rsquo;ll look at some questions to ask yourself during each of the phases. The questions listed come from Fogarty (1994) in <a href="https://teal.ed.gov/sites/default/files/Fact-Sheets/4_TEAL_Metacognitive.pdf">this article</a>.</p>

<h3>Planning</h3>

<p>You can begin your learning session by considering how to approach the task you are about to complete. Begin by listing the skills and strategies you have at your disposal, and identify which one(s) are appropriate for what you&rsquo;re trying to do. For example, when learning a new JavaScript framework, you might choose a Venn Diagram as a tool that fits what you are trying to do - learn about something just a little different from what you already know. As you prepare to begin, it&rsquo;s also a idea to decide how long you will stay focused, and how often and for how long you will take breaks. Timeboxing can really help you stay focused for longer periods of time.</p>

<h4>Questions to Ask</h4>

<ul>
<li>What am I supposed to learn?</li>
<li>What prior knowledge will help me with this task?</li>
<li>What should I do first?</li>
<li>What should I look for in this reading?</li>
<li>How much time do I have to complete this?</li>
<li>In what direction do I want my thinking to take me?</li>
</ul>


<h3>Monitoring</h3>

<p>Once you&rsquo;ve set your intention for your learning session, you begin. As you go, it&rsquo;s a good idea to monitor your comprehension. Giving yourself this kind of feedback is one of the strongest tools you can use to make sure you&rsquo;re actually &ldquo;getting it&rdquo;.</p>

<p>Whenever you finish reading a section of documentation or a block of source code, you can ask yourself &ldquo;how would I summarize what I just read to someone who knew nothing about it?&rdquo; If you struggle to answer, that&rsquo;s a signal that you should go back and read more deeply.</p>

<p>You can also keep track of how far you&rsquo;ve gotten relative to your goal. &ldquo;What percentage of the documentation have I read? How much longer will it take me to read it all?&rdquo;</p>

<p>Finally, it can be very helpful to become aware of distracting stimuli as they arise (I&rsquo;m looking at you, Growl notifications!), and consider removing them.</p>

<h4>Questions to Ask</h4>

<ul>
<li>How am I doing?</li>
<li>Am I on the right track?</li>
<li>How should I proceed?</li>
<li>What information is important to remember?</li>
<li>Should I move in a different direction?</li>
<li>Should I adjust the pace because of the difficulty?</li>
<li>What can I do if I do not understand?</li>
</ul>


<h3>Evaluating</h3>

<p>As you conclude a learning session, you should reflect on your what just happened. Identify the higher level concept(s) you just read about, and assess whether you would be able to put what you learned into practice by using them to build something. It&rsquo;s also really helpful to set yourself up for future success. Ask yourself what more you want to know about the concept, sketch a plan for your next learning session, and identify other resources you can use to find out more.</p>

<h4>Questions to Ask</h4>

<ul>
<li>How well did I do?</li>
<li>What did I learn?</li>
<li>Did I get the results I expected?</li>
<li>What could I have done differently?</li>
<li>Can I apply this way of thinking to other problems or situations?</li>
<li>Is there anything I don’t understand—any gaps in my knowledge?</li>
<li>Do I need to go back through the task to fill in any gaps in understanding?</li>
<li>How might I apply this line of thinking to other problems?</li>
</ul>


<h2>Conclusion</h2>

<p>Being a programmer is tough work. As if solving complex problems and debugging dependency issues weren&rsquo;t enough, we have to stay up on the latest technologies, and continue learning all the time to keep abreast of the pace of technology. Sometimes trying to organize that process can feel like throwing spaghetti at the wall and seeing what sticks. But our time is precious, so we would like to make the most of the it when we sit down to learn.</p>

<p>In this article, we explored educational research on Metacognition - awareness of our own knowledge and learning process. We explored the Planning-Monitoring-Evaluating framework. This approach gives us a way to break down a learning session and ask ourselves self-reflective questions along the way to make sure we&rsquo;re getting the most out of our time.</p>

<p>In a future article, we&rsquo;ll take a look at some more specific strategies that can also be used to level up your metacognitive knowledge and regulation efforts.</p>

<p>Until then, best of luck, and see you on the interwebs!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Write A Technical Blog Post: Part 3]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/12/17/how-to-write-a-technical-blog-post-part-3/"/>
    
    <updated>2015-12-17T19:53:19-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/12/17/how-to-write-a-technical-blog-post-part-3</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/write-technical-blog-post-part-3/">The Quick Left Blog</a></p>

<h2>Part 3: Publish</h2>

<p>In this three part series, we&rsquo;re exploring what it takes to break into the technical blogging space. In the first part, we looked at initial steps you can take when preparing to write. In the second part, we explored how to to get into a good writing flow during the actual writing itself. In this, the third and final part of this series, we&rsquo;ll talk about one more aspect of how to write a technical blog post: getting as many people to read it as possible.</p>

<h2>Survey Your Kingdom</h2>

<p>So you&rsquo;ve generated your blog post idea, thought about your long-tail keyword, written your blog post, proofread and edited it. It&rsquo;s time to think about pushing your little bird out of the nest and seeing how she flies.</p>

<p>First, take another look at what you&rsquo;ve written. Is there anything you left out? Are there parts you&rsquo;ve included that don&rsquo;t really belong? Maybe you can split them out and use them for another post. Your readers will appreciate it if you stick to a single topic. It makes for an easier time digesting what you&rsquo;re talking about.</p>

<p>Along the same lines, take a look at the length of your post. If it&rsquo;s really long, consider splitting it into a series. I&rsquo;ve found that the best length is around 750-1000 words. After that, posts tend to lose focus, and readers tend to check out. Plus, when you&rsquo;re publishing a series, you have more chances to promote yourself.</p>

<p>When you&rsquo;re sure that you&rsquo;ve got your post(s) tightly focused, you&rsquo;re <em>almost</em> ready to publish. There are just two more things to consider: SEO and scheduling.</p>

<h2>Optimize for SEO</h2>

<p>Since you want to get as much traffic as you can once your post goes live, this is a good time to go through your post and make sure that you&rsquo;ve done what you can to get good <a href="https://moz.com/blog/visual-guide-to-keyword-targeting-onpage-optimization">Search Engine Optimization (SEO)</a>.</p>

<p>Here are some things to consider. Is your long-tail keyword phrase in all of the following places? The page title, main headline, repeated a couple of times in the body, the meta description and page URL? It&rsquo;s also a good idea to include several images (don&rsquo;t forget the <code>alt</code> tags - set one of them to your keyword phrase), links to pages internal and external to your site, and a set of relevant meta keywords. For fun, you can also view your page as it appears to a search engine bot using <a href="http://seo-browser.com/">SEO Browser</a>.</p>

<h2>Build The Buzz</h2>

<p>Ok. Your content is all set. All that&rsquo;s left is to put it out into the world. Before you click &ldquo;publish&rdquo; think about how you&rsquo;re going to do send it off. A blog post is not like a software product. A soft launch is usually not a great idea.</p>

<p>When I&rsquo;m thinking about releasing a post, I recall my days in the music industry. There&rsquo;s some common wisdom in that industry about releasing an album that goes like this. You want to slowly build the buzz, like a swelling wave, in the weeks before the album drops. Then, you drop it right when the wave is at its peak. The number of sales you make in the first week is greatly indicative of how well the album will sell over time.</p>

<p>While this wisdom may not fit exactly for tech blog posts, as they can stay relevant or even become <em>more</em> relevant as the industry changes, it&rsquo;s still worth thinking about &ldquo;the wave swell&rdquo; when getting ready to publish a post. Good ways to build the buzz include: reaching out to influencers before you publish, discussing your topic and related topics on Twitter and Hacker News, and piggybacking on trending hashtags to get people thinking about what you&rsquo;re writing about.</p>

<p>Ideally, by the time you go live, you&rsquo;ll just be continuing the conversation that&rsquo;s already been happening. Your post will come out right on time.</p>

<h2>Schedule Release</h2>

<p>Going along with the idea of building the buzz, be intentional about when you plan to publish your post. You can probably configure your blog platform and social media accounts to publish content at a specific time.</p>

<p>Find out the times when your target readers are most likely to see that your article came out, and <a href="http://www.shortstack.com/the-best-times-to-post-on-social-media-infographic/">publish then</a>. Follow up with scheduled tweets.</p>

<p>If you know there&rsquo;s an event related to your post coming up, plan to publish just before or after that event. For example, you&rsquo;re writing about a new feature in Rails 5 feature and it&rsquo;s coming out on Christmas, plan to publish your post during the week surrounding Christmas.</p>

<p>If you&rsquo;re a prolific writer, you can space out your posts to build on your own buzz. If you have two posts ready to go, don&rsquo;t publish them a day apart. Give the first one a little time to get some traction, then hit your audience with the second just as they&rsquo;re beginning to forget about you. This works especially with a series.</p>

<p>Spending a little time to think about when you should publish you post can go a long way toward getting your voice heard by a wider audience.</p>

<h2>Shout It From The Rooftops</h2>

<p>This final point is probably obvious, but you&rsquo;ll want to promote your work as extensively as possible once it finally goes live. Here are some good places to self-promote:</p>

<ul>
<li><a href="https://twitter.com/">Twitter</a></li>
<li><a href="https://news.ycombinator.com/">Hacker News</a></li>
<li><a href="https://lobste.rs/">Lobste.rs</a></li>
<li><a href="https://www.reddit.com/">Reddit</a></li>
<li><a href="https://www.quora.com/">Quora</a></li>
<li><a href="https://www.facebook.com/">Facebook</a></li>
<li><a href="https://www.linkedin.com/">LinkedIn</a></li>
<li><a href="http://stackexchange.com/">Stack Exchange</a></li>
<li><a href="http://www.smashingmagazine.com/">Smashing Magazine</a></li>
<li><a href="https://medium.com/">Medium</a></li>
<li><a href="http://www.pointer.io/">Pointer.io</a></li>
<li><a href="http://paper.li/">Paper.li</a></li>
<li>Slack Communities</li>
<li>Coworking space forums</li>
</ul>


<p>At a minimum, I recommend promoting your post on Twitter, Hacker News, Reddit as soon as it comes out.</p>

<p>If your blog allows comments, or if you post to Hacker News or Reddit, you&rsquo;ll probably begin to get some questions and hear some opinions. Take the time to respond to them. The more you engage with people, the more they will appreciate and share your writing.</p>

<h2>Wrapping Up</h2>

<p>Over the course of this three part series, we&rsquo;ve followed the entire cycle of how to write a technical blog post. Starting from the barren field of your mind with nothing but doubts in part one, and we traveled through the process of how to actually <em>write posts</em> in part two. With this post, part three, we&rsquo;ve come all the way to the end: SEO optimization and self-promotion.</p>

<p>I hope this series has given you the tools you need to enter the world of technical blogging. Although blogging can seem overwhelming at first, it&rsquo;s actually not as difficult as it seems. Once you&rsquo;ve written a post or two, you&rsquo;ll begin to discover a process that works for you. People will start to recognize you around the web (and around town). At that point, you&rsquo;ll be building on your past successes. Promotion will get easier too, because people will already be familiar with your work.</p>

<p>Best of luck to you in your writing career. I look forward to reading what you come up with!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Write A Technical Blog Post: Part 2]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/11/17/how-to-write-a-technical-blog-post-part-2/"/>
    
    <updated>2015-11-17T19:53:17-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/11/17/how-to-write-a-technical-blog-post-part-2</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/write-technical-blog-post-part-2/">The Quick Left Blog</a></p>

<h2>Part 2: Write</h2>

<p>In this three part series, we&rsquo;re looking at some of the best ways to get into a good flow as a technical blogger. In the first part, we talked about some initial steps you can take to get psyched up when figuring out how to write a technical blog post. In this, the second part of of the series, we&rsquo;ll talk about how to do the actual writing itself. We&rsquo;ll explor some effective structures you can use to organize your posts, thoughts about the creative process of writing, and how to make sure your content is as good as it can be.</p>

<h2>Define Your Structure</h2>

<p>So you&rsquo;ve got a topic, you&rsquo;ve identified a long-tail keyword, and you&rsquo;re ready to start writing. You put your text editor in distraction-free mode, don your noise-canceling headphones, and get ready to dig in. But where to begin?</p>

<p>I recommend treating your first session on a given post as a scaffolding-building session. Don&rsquo;t expect to get into details. Forget about jokes and memes. Just sketch an outline of what you want to write about.</p>

<p>There are quite a few good ways to structure a blog post. You don&rsquo;t have to reinvent the wheel. Just pick one of these basic approaches, and it should get you where you need to go.</p>

<h3>The List</h3>

<p>You know what I&rsquo;m talking about. Titles like <a href="https://blog.engineyard.com/2015/five-ruby-methods-you-should-be-using">Five Ruby Methods You Should Be Using</a> are gold. Potential readers know titles like this are a cheap shot, but they can&rsquo;t resist clicking the link anyway. That&rsquo;s why it&rsquo;s called click-bait.</p>

<p>If you&rsquo;re writing this kind of post, the structure is obvious: write an intro and a conclusion, and slap the five Ruby methods and their explanations in the middle.</p>

<h3>The How-To</h3>

<p>So much of our industry is about learning new technologies and new ways to do things. Developers need to understand &ldquo;how to do X&rdquo; every single day. When they google for it, they will probably type &ldquo;how to&hellip;&rdquo; If your post begins with those words, perhaps it will be the one they find and read.</p>

<p>Writing a how-to article is a little more complex than doing a list. I usually break it down like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Introduction
</span><span class='line'>2. Introduce a theoretical coding situation
</span><span class='line'>3. Write the test for what you want to solve
</span><span class='line'>4. Make the test pass
</span><span class='line'>5. Repeat steps 3-4 until the point is made
</span><span class='line'>6. Conclusion that includes a link to the code on GitHub</span></code></pre></td></tr></table></div></figure>


<p>I used this structure in my <a href="https://blog.engineyard.com/2014/wrapping-your-api-in-a-ruby-gem">Wrapping Your API In A Ruby Gem</a> post, and got a lot of great feedback from readers.</p>

<h3>The (Five) Paragraph Essay</h3>

<p>If you&rsquo;re writing an opinion or agile process piece, the basic <a href="https://en.wikipedia.org/wiki/Five-paragraph_essay">Five-paragraph essay</a> style is a great way to organize your thoughts. If you went to high school, you&rsquo;re probably familiar with this layout, so it can be a comfortable choice to reach for. To write an essay think about how you&rsquo;ll introduce your topic and assert a thesis. Next, prove your point with supporting arguments. Finally, summarize and reiterate your argument in the conclusion. Your outline will look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. Introduction & Thesis
</span><span class='line'>2. Supporting Point 1
</span><span class='line'>3. Supporting Point 2
</span><span class='line'>4. Supporting Point 3
</span><span class='line'>5. Conclusion</span></code></pre></td></tr></table></div></figure>


<h3>The Well-Actually</h3>

<p>At Quick Left, we do a lot of joking about <a href="http://www.urbandictionary.com/define.php?term=neckbeard">being a neckbeard</a>. There are a lot of smart people that work here, and more often than not, they have strong opinions about how to do things. Sometimes when one person begins to make a statement, an opinionated colleague will correct them with a sentence that begins with &ldquo;well actually&hellip;&rdquo;</p>

<p>&ldquo;Well actually&rdquo; is a great phrase, full of tension. In fact, you can build an entire blog post around the drama of this tension. Some of the most interesting articles I read are ones that follow what my mentor <a href="https://twitter.com/j3">Jeff Casimir</a> called &ldquo;the hero&rsquo;s journey&rdquo;.</p>

<p>The basic breakdown of the hero&rsquo;s journey story goes like this. First, you write about &ldquo;I always thought that <em>foo</em> worked like <em>bar</em>&rdquo;, or &ldquo;I&rsquo;ve always solved <em>foo</em> by doing <em>bar</em>&rdquo;. Then you move on to say, &ldquo;one day, I decided to solve <em>foo</em> by using <em>baz</em> instead&rdquo;. Finally, you wrap the whole thing up with &ldquo;but it turns out that the correct solution is neither <em>bar</em> nor <em>baz</em>, but <em>qux</em>&rdquo;. This is your &ldquo;well actually moment&rdquo;.</p>

<p>These kinds of posts can be fascinating to read because they follow a story arc, and they provide more suspense than you get in flat structures like lists and how-tos.</p>

<h2>Interlude: Let It Simmer</h2>

<p>Deciding on a topic, generating a long-tail keyword, and sketching out your basic structure is pretty good for a first day&rsquo;s work on a post. At this point, I usually like to leave the post alone for a while and let it simmer. I&rsquo;ve found that when I take a break and give it a little space, my subconscious gets to work on exploring the main points I&rsquo;ve set out for myself. When I come back, I find I have plenty of ideas of what to say. When I take some space in between writing sessions, the resulting post tends to be a lot richer than when I force my way through in a single sitting.</p>

<h2>Fill In The Details</h2>

<p>After you&rsquo;ve taken a bit of a break and you&rsquo;re ready to come back to your writing, it&rsquo;s time to actually do the hard part. At this point, I typically feel that I&rsquo;d like to do <em>anything but</em> sit down at the keyboard. I can think of a million distractions: &ldquo;I&rsquo;ll start writing right after I go get a pumpkin spice latte&rdquo;, &ldquo;just as soon as I send this email&rdquo;, or &ldquo;I think I&rsquo;ll check Reddit first&rdquo;. All of these impulses are what a mentor of mine once called <em>anything to avoid buckling down</em>.</p>

<p>So how do we overcome the feeling of <em>anything to avoid buckling down</em>? My favorite way to deal with this problem is to set up a ritual. I won&rsquo;t get into the details of what mine entails, but here are some things that can be helpful: put on a specific kind of music, remove social media, email, and chat distractions, set up a different mode in your text editor, drink a certain coffee beverage. You can get even <a href="http://www.grammarly.com/blog/2014/the-strange-and-storied-superstitions-of-writers/">more superstitious</a> if you want to. But the basic idea is that by identifying a series of things you do before you write, you can train your brain to get &ldquo;in the zone&rdquo;.</p>

<p>Once you&rsquo;ve gotten in the zone (however it is that you do that), just start writing. You know the phrase &ldquo;genius is 1% inspiration and 99% perspiration&rdquo;? This step - filling in the details - is the perspiration part.</p>

<p>The key thing at this stage is to let yourself get into flow state. As you start to express an idea, you&rsquo;ll be tempted to stop and think &ldquo;is that good enough&rdquo;, &ldquo;is that really accurate&rdquo;, or &ldquo;could I have worded that better?&rdquo; I recommend just letting it come as it will, and put off the judgements for later. Interrupting yourself to evaluate your writing disrupts your flow. If you&rsquo;re a programmer, think of it as a TDD exercise: first make the idea come out, <em>then</em> refactor.</p>

<p>Often times, you&rsquo;ll have to complete a couple of sessions like this before you get through your entire structure and have a complete first draft. Each time you sit down to write about it, you have to get back into the flow. Just follow your ritual and keep working. You&rsquo;ll be through it before you know it.</p>

<h2>Write A Conclusion</h2>

<p>There&rsquo;s a bit of an art to writing a conclusion section. On one hand, you want to reiterate and summarize the high-level concepts involved with what you&rsquo;ve been talking about. On the other, you want to encourage the reader to think about the wider implications of the subject. How can it be applied to other situations? How can what you&rsquo;ve been talking about be extended illuminate a higher level of understanding? For example, if you were writing about Stripe integration, maybe talk about how your post fits in the broader context of e-commerce.</p>

<p>The conclusion is also a great place to encourage people to take some sort of action on what they&rsquo;ve learned. Whoever&rsquo;s hosting your blog post would probably like to have the readers interact with their website. You can push them to do this by linking them to relevant content elsewhere in the site. Or you can use a P.S. section encouraging them to leave a comment on your post.</p>

<h2>Proofread It (Twice)</h2>

<p>Once you&rsquo;ve completed your conclusion, your first draft is done. Take another break and get some space from the post. Shift your mindset from &ldquo;getting stuff done&rdquo; to &ldquo;let&rsquo;s clean this up&rdquo; instead.</p>

<p>Remember above when I suggested you put off judging or evaluating your work? Now&rsquo;s the time to invite that impulse back in. It&rsquo;s time for everyone&rsquo;s least favorite part of writing: proofreading. You need to do it. Read through what you&rsquo;ve written and make any changes that suggest themselves. Then read it aloud and see how it sounds. Make more changes. Pretend that you are a member of your target audience and read it from their point of view.</p>

<p>The more times you repeat this process, the more clear and understandable your writing will be. Aim for brevity and precision. Long sentences are hard to understand. Only write as much as you need to to get your point across, cutting out extraneous words and explanations and really tightening up your word choices.</p>

<h2>Ask For Review</h2>

<p>It&rsquo;s a really good idea to get another set of eyes on your writing. If you&rsquo;re lucky enough to have an editor, they will give you great ideas for improving your phrasing, word choice, and structure. If not, reach out to your peers to see if any of them are willing to help you improve your work. Especially target those you think already know the ins and outs how to write a technical blog post. The more people you can get to check your work before you release it to the world, the better.</p>

<p>You can also ask someone in the role you&rsquo;re writing for to review it. If there&rsquo;s nobody on your team in that role, try reaching out to a popular influencer on Twitter or elsewhere on the web. In fact, this is also a good thing to consider doing for promotional purposes. Reaching out to major influencers early and gathering their feedback on your topic might lead to them sharing your content, which will dramatically improve your traffic.</p>

<p>Once you&rsquo;ve solicited some help, take your reviewers&#8217; advice to heart. You don&rsquo;t have to incorporate every single change they suggest, but try to keep in mind that they&rsquo;re not out to criticize you personally. They&rsquo;re trying to help you, and the places they have trouble understanding your language are good spots to polish up the way you present your ideas.</p>

<p>Once you&rsquo;re done proofreading, editing, and making changes from reviewer comments, you&rsquo;re <em>almost</em> done writing. But first, there&rsquo;s just one more thing. Proofread it again. I&rsquo;m not kidding :)</p>

<h2>Wrapping Up</h2>

<p>Even if you know what you want to write about, the process of actually getting the words down can be hard if you haven&rsquo;t done a lot of writing in the past. In this post, we&rsquo;ve looked at some cookie-cutter structures you can use to scaffold your post, the importance of giving yourself some space between writing sessions, and tips for proofreading.</p>

<p>Stay tuned for the third and final part of this series, where we&rsquo;ll explore how to draw more visitors to your post using SEO best practices and how to promote your writing on social media for the most benefit. See you then!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Write A Technical Blog Post: Part 1]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/11/12/how-to-write-a-technical-blog-post-part-1/"/>
    
    <updated>2015-11-12T19:53:14-07:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/11/12/how-to-write-a-technical-blog-post-part-1</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/write-technical-blog-post-part-1/">The Quick Left Blog</a></p>

<h2>Part 1: Prepare</h2>

<p>Content is king. Bill Gates <a href="http://www.craigbailey.net/content-is-king-by-bill-gates/">predicted it in 1996</a>. Much of the money made online today is in content. In the tech world, where languages and frameworks are here today and gone tomorrow, this is doubly true. Developers, managers, and CEOs of technical companies spend an enormous amount of time understanding their chosen tools, the next hot thing, and how to stay relevant.</p>

<p>It&rsquo;s no wonder so many startups host blogs on their sites. Blogs drive traffic to your site, increase your visibility, and elevate your brand in the tech world. So how can you get a piece of the action?</p>

<p>In this three part series, we&rsquo;ll explore some strategies you can use to generate ideas, produce clearly written blog posts, and effectively promote your work on the internet. In this, the first part of of the series, we&rsquo;ll talk about how to get started as a technical writer: overcoming mental resistance, generating ideas, and starting with your audience in mind.</p>

<h2>Get Psyched Up</h2>

<p>Figuring out how to write a technical blog post can be overwhelming if you&rsquo;re not used to it. Many people find it hard to choose a topic. A lot of times, it comes down to feeling like you don&rsquo;t know enough about anything to write about it. But if you think that you have to be an expert before you start writing, think again.</p>

<p>I don&rsquo;t know how many times I&rsquo;ve heard people say: &ldquo;I would write about <em>(insert technology)</em> if I knew a little bit more about it&rdquo;. It&rsquo;s common to feel uncomfortable with the idea of publishing a piece telling the world &ldquo;how you should do <em>X</em>&rdquo;. But fret not. This is just a little bit of <a href="http://startupbros.com/21-ways-overcome-impostor-syndrome/">imposter syndrome</a>.</p>

<p>Try on a different perspective: think of blogging as a learning process. Maybe you&rsquo;re not the world&rsquo;s foremost expert on <a href="https://facebook.github.io/flux/">Flux</a>. It interests you, but it&rsquo;s a little bit hard to wrap your head around. Instead of feeling like you have to be an experienced Flux developer before write about it, think of it as the path you&rsquo;ll use to understand it. There&rsquo;s no better way to understand something deeply than to teach it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>If you want to learn something, read about it. If you want to understand something, write about it. If you want to master something, teach it.
</span><span class='line'>
</span><span class='line'>- Yogi Bhajan</span></code></pre></td></tr></table></div></figure>


<p>Blogging can be a great way to give structure to what you want to understand about a topic. It can also serve as a roadmap of how you will get to mastery. What are the components of the topic? How can you break it down? What little pieces can you try to grok that will help you see the big picture? These are the questions you have to ask when you&rsquo;re teaching something. They also happen to be the questions you&rsquo;ll need to answer to learn something!</p>

<p>You can also treat blogging as a way to document how to solve a specific problem so that you can look it up later. Once you&rsquo;ve gone through the struggle of figuring out what&rsquo;s going on, you&rsquo;ll have a handy place to go back to and remind yourself what you did - in your own writing! Might as well open source it.</p>

<p>There have been a number of times in <a href="http://fluxusfrequency.github.io/blog/archives/">my blogging career</a> when people have read one of my posts, then reached out to me and and asked: &ldquo;you&rsquo;re an expert on <em>X</em>, what can you tell me about this one arcane part of how its written?&rdquo; In almost every case, it was the first time I&rsquo;d even tried to understand the topic!</p>

<h2>Brainstorm</h2>

<p>So you&rsquo;ve gotten past your initial reservations about writing, it&rsquo;s time to choose a topic. Figuring out what to write about can be just as daunting as deciding to write. But once you know where to look, you&rsquo;ll find that fertile ideas present themselves every day.</p>

<p>Here are a few of the strategies I use to come up with topic ideas.</p>

<p>As a consultant, I work on a lot of different projects. Each one usually has one or two unusual problems that have to be solved in a novel way, either due to the business domain or idiosyncracies of the tech stack. I keep an eye out for <a href="http://fluxusfrequency.github.io/blog/2014/12/09/caching-asynchronous-queries-in-backbone/">things like this</a> and write about them. They usually make for an interesting read for curious developers.</p>

<p>I also keep an eye out for ways that I am percieved to stand out by client teams. Sometimes I&rsquo;ll suggest a certain way of doing things that is new to a team, and I get a lot of feedback about what a great idea it is. For example, the <a href="https://quickleft.com/blog/pull-request-templates-make-code-review-easier/">Quick Left Pull Request Template</a> is often quite appreciated.</p>

<p>Similarly, the particular business situation that a client company finds itself often lends itself to a process-related post. I recently did some work for a company whose codebase hadn&rsquo;t been worked on for a while, so I wrote <a href="https://quickleft.com/blog/ramping-up-developers-on-code/">this post</a> and <a href="https://quickleft.com/blog/bring-back-app-prioritize-best-features/">this post</a> to help technical leaders in this situation find some direction.</p>

<p>In all of these examples, you could just as easily leverage your business or technical situation even if you&rsquo;re not a consultant. Think about your codebase&rsquo;s &ldquo;gotchas&rdquo;, ideas that new hires have brought in, and the quirks of your particular niche in the business world. These are rich sources of post topics.</p>

<p>If none of these situations applies and you&rsquo;re still drawing a blank, you can always go the old fashioned route: google it. Sites like <a href="http://buzzsumo.com/">Buzzsumo</a>, <a href="http://www.semrush.com/">SEMRush</a>, and <a href="http://www.alexa.com/">Alexa</a> are great for generating ideas. I also recommend <a href="https://www.google.com/trends/">Google Trends</a> for figuring out what&rsquo;s people are asking about a given topic. All of these tools are great ways to identify things to write about that people will <em>actually be interested in reading</em>. This great for generating page views.</p>

<h2>Consider Your Audience</h2>

<p>While we&rsquo;re on the topic of page views, you should probably consider who it is that you&rsquo;re writing for. Is it developers? Your product owner, scrum coach, or CEO? Maybe marketers or salespeople? What role do they play in the tech industry?</p>

<p>It&rsquo;s vital to have an idea of who you want to read your post. Knowing this enables you to answer an important question: what problem(s) does this person need to solve in order to do his/her job?</p>

<p>When people face a difficulty that they don&rsquo;t know how to solve, they google the answer. If your blog post comes up at the top of the search results, they&rsquo;ll probably read it. On the other hand, some folks will look for the answers to their questions in other places online. Where does your target audience spend their time? Are they hanging out on Reddit, Stack Exchange, or Quora? Think about how you can get your post there, and write it such that it will be accepted by that online community.</p>

<h2>Identify A Long-Tail Keyword</h2>

<p>You might think that marketing your piece is something that comes after you&rsquo;ve written it. But considering how you will promote your post before you write it can help focus your writing and lead to a warmer reception when you publish. One of the easiest wins you can make early on is to <a href="http://www.8womendream.com/about-the-women-of-8-women-dream/author-catherine-hughes/award-winning-titles-and-headlines-for-inspiration-to-create-viral-blog-posts">choose an effective title</a>.</p>

<p>I typically try to match my titles with a well-chosen <a href="http://www.wordtracker.com/academy/keyword-research/technical-guides/three-good-reasons-to-target-long-tail-keywords">long tail keyword</a>. Long tail keywords are specifically targeted 3-4 word phrases meant to be found by readers researching a particular topic.</p>

<p>Because single-word rankings in search results are very competitive, it&rsquo;s easier to get a higher search result rank for a multi-word phrase than a single keyword. Usually, it&rsquo;s best to think of the most compact way to express what you&rsquo;re writing about using common language.</p>

<p>For example, the long-tail keyword for <em>this</em> post is &ldquo;how to write a technical blog&rdquo;. It&rsquo;s more likely that someone would search for that phrase than something longer like &ldquo;steps to follow when you want to publish your first technical blog post&rdquo;. On the other side, it&rsquo;s more likely that my audience will find my post than if I had used something more generic like &ldquo;tech blogging&rdquo;.</p>

<p>Generating a good long-tail keyword is a bit of a fine art. If you have any friends that are marketers, ask them for help. Barring that, you can google terms similar to your idea to see what people are asking about, use a thesaurus, or follow the suggestions in <a href="http://blog.hubspot.com/insiders/find-keywords-for-your-business">this article</a>.</p>

<h2>Wrapping Up</h2>

<p>Getting into the head space of writing a blog post can be difficult at first. But when you treat it as a learning process and break the process up into small, manageable tasks, it becomes easier. In this post, we&rsquo;ve looked at how to rethink your mindset about the purpose of blogging, ways to generate ideas, thinking about your audience, and how to drive your topic with a tightly focused long-tail keyword.</p>

<p>Stay tuned for part two of this series, where we&rsquo;ll talk about another important aspect of how to write a technical blog post: improving your actual <em>writing process</em> itself. Until then, good luck and happy blogging!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[What It Takes To Be A Software Consultant]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/10/28/what-it-takes-to-be-a-software-consultant/"/>
    
    <updated>2015-10-28T20:52:59-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/10/28/what-it-takes-to-be-a-software-consultant</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/takes-software-consultant/">The Quick Left Blog</a></p>

<h2>Four Things Our Developers Wished They Knew On Their First Day</h2>

<p>As part of our onboarding process at Quick Left, we meet with recent hires after 30 days and ask them several questions about their experience so far. One of the questions that gets some of the most interesting reponses is: &ldquo;What advice would you give yourself on your first day?&rdquo;</p>

<p>After six years in business, we&rsquo;ve asked this question quite a few times. We recently took some time to read back and analyzing the responses we&rsquo;ve gotten. When we looked closely, some trends started to emerge. Interested in finding out what it takes to be a software consultant? Read on to find out the top four pieces of advice our devs wished they had known on their first day.</p>

<h2>Forget Imposter Syndrome</h2>

<p>Becoming a tech consultant can be intimidating. It&rsquo;s natural to feel like <a href="http://www.forbes.com/forbes/welcome/">you don&rsquo;t know enough</a> to effectively counsel clients in making the best decisions. Our advice? Forget imposter syndrome.</p>

<p>As one developer put it, &ldquo;you come in here more prepared than you think&rdquo;. Everyone has life experience that they can bring to bear on the job. In the words of another QLer: &ldquo;even junior developers have a lot to offer with their other experience&rdquo;. We&rsquo;ve hired people from all kinds of backgrounds, from the restaurant industry, to project management, to education, and every one of them has found that they have skills they can leverage in serving clients. &ldquo;Just relax and know everything will be fine. You&rsquo;ll learn things&rdquo;.</p>

<p>If you just can&rsquo;t shake the feeling of inadequacy, you can always fall back to this advice: &ldquo;shut up about your lack of confidence, keep it to yourself&rdquo;.</p>

<h2>Be A Self-Starter</h2>

<p>Quick Left has always been known as a democratic place to work. We made the WorldBlu List of Most Democratic Workplaces in <a href="https://quickleft.com/blog/quick-left-makes-worldblu-s-2012-list-of-most-democratic-workplaces/">2012</a> and <a href="https://quickleft.com/blog/the-2013-worldblu-list-of-most-democratic-workplaces/">2013</a>. As we&rsquo;ve grown, we&rsquo;ve always managed to <a href="https://quickleft.com/blog/3-gotchas-in-developing-a-democratic-organization/">keep that spirit alive</a> despite the pressures of scaling. One of the things that&rsquo;s made that possible has been that we&rsquo;ve focused on hiring people who know how to take the initiative.</p>

<p>Here&rsquo;s some of the advice we&rsquo;ve heard employees give about being a self-starter: &ldquo;start working, don’t wait for someone to tell you what to do&rdquo;. Another person said, &ldquo;just try things and if something breaks, its not the end of the world&rdquo;. Because we&rsquo;re smart and know when to ask for help, we know that sometimes the best strategy is just to dive in and try to solve things.</p>

<p>If all else fails, you can always read the manual. It never hurts to read the docs. If that fails, there&rsquo;s always &ldquo;source code spelunking&rdquo; (a favorite pasttime around here).One QLer reflected: &ldquo;sometimes I was asking questions and the answer was right there in front of me and I just needed to read more&rdquo;.</p>

<h2>Get To Know Everyone</h2>

<p>Two heads are better than one. And a whole team of heads is better than two! We pride ourselves on a strong culture of education and mentorship at Quick Left. We know that we can rely on each other to help when the going gets tough. None of that would be possible if we didn&rsquo;t have great relationships within the team.</p>

<p>Although we host plenty of events that bring our developers together, like our <a href="https://quickleft.com/blog/tag/hackfest/">hackfests</a> and monthly happy hours, some of our developers found that they just had to get themselves out there and &ldquo;engage with the team outside of work&rdquo;.</p>

<p>Others reflected that they wished they&rsquo;d leveraged the team as a resource earlier. So how do you get integrated? &ldquo;Go out to coffee with everyone in the company&rdquo;, one person suggested&#8221;. This goes for both the social and the code realm: &ldquo;reach out and talk to my co-workers more. Both small talk and technical stuff&rdquo;.</p>

<p>As nerds, it can be difficult to connect socially. But the benefits more than make up for the little bit of discomfort it costs up front. Tight teams stay together.</p>

<h2>Don&rsquo;t Sweat It</h2>

<p>Finally, there&rsquo;s one piece of advice that we saw again and again as we looked back through the archives: &ldquo;don&rsquo;t sweat the small stuff&rdquo;. The first days on a new job are always a little bit nerve-wracking, but everything is going to be fine in the end.</p>

<p>Your team wants you to succeed. We&rsquo;re all in this together. So don&rsquo;t get caught up in little problems, because we&rsquo;re all here to support each other in the big picture. One developer admitted: &ldquo;it was stressful for me to get into a new focus. I would have told myself to calm down.</p>

<p>Displaying a little bit of confidence can go a long way. It can put clients, managers, and team mates at ease. This makes everything run a little bit more smoothly. Take another QLer&rsquo;s advice: &ldquo;just relax and know everything will be fine&rdquo;.</p>

<h2>Conclusion</h2>

<p>There are a lot of things that go into being an effective developer. You have to know your tools, stay up to date on the latest technology, and make sure that you&rsquo;ve thought through all of the edge cases. At the same time, being a consultant is no walk in the park either. You have to be able to balance budget, time constraints, client relationships, and getting work done. Between the two of them, what it takes to be a software consultant can seem daunting.</p>

<p>Even developers <a href="https://quickleft.com/blog/my-first-4-months-at-sprintly/">coming from a product background</a> are sometimes daunted when they first become consultants. But after a few months, most of the people we hire tend to <a href="https://quickleft.com/blog/my-first-month-of-consulting/">get the hang of it</a> regardless of what they were doing before.</p>

<p>After doing this for several years, it&rsquo;s interesting to look back and see that developers consistently gave the same answers for how to deal with filling this role. Time after time, the answer to the question &ldquo;what advice would you give yourself on your first day&rdquo; came out matching one of the same themes.</p>

<p>If you&rsquo;re entering the world of software consulting, take these tips to heart. Believe in yourself, trust your gut, say hello, and just relax. Best of luck. See you on the interwebs!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Bring Back Your App: How To Prioritize Your Best Features]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/10/20/bring-back-your-app-how-to-prioritize-your-best-features/"/>
    
    <updated>2015-10-20T20:52:44-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/10/20/bring-back-your-app-how-to-prioritize-your-best-features</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/bring-back-app-prioritize-best-features/">The Quick Left Blog</a></p>

<p><img src="https://quickleft.com/wp-content/uploads/priritize-tasks-300x202.gif" alt="how to prioritize your best features"/></p>

<h2>Introduction</h2>

<p>The tech world moves fast. It&rsquo;s not uncommon for a startup to scale from two people in a coworking space to a team of thirty or more in a matter of months. Just as often, the team shrinks again due to sudden market changes or errant developers moving on to the next big thing.</p>

<p>When you&rsquo;re getting ready to rebuild your business, it can be hard to know where to begin. There are so many things to do, from marketing, to onboarding a new team, to deciding what to build next.</p>

<p>In <a href="http://quickleft.com/blog/ramping-up-developers-on-code">part one of this series</a>, we talked about some of things you can do on the technical side to get your dev team up and running with a minimum of fuss.</p>

<p>In this, the second and final part of this series, we&rsquo;ll focus on how to prioritize your best features. We&rsquo;ll look at how to decide what you should get rid of and what you should pull out into its own codebase. Then we&rsquo;ll tackle the question: what to build next?</p>

<h2>Finding Your Strategic Direction</h2>

<p>Assuming your development team is all ready to go, you might start to ask yourself: &ldquo;what do we build next?&rdquo;</p>

<p>But before you assume that you&rsquo;re ready to start prototyping and shipping new features, you should take a hard look at what&rsquo;s already there. Then, ask yourself if you shouldn&rsquo;t do a little housekeeping first.</p>

<h3>Take An Inventory</h3>

<p>It&rsquo;s a good idea to take an inventory of the workflows and features that are already in your application. Make a list of ways that users interact with the system. You could even consider <a href="https://blog.engineyard.com/2015/happy-sad-evil-weird-feature-planning">writing user stories</a> for the functionality that&rsquo;s already there.</p>

<h3>Consider Removing Features</h3>

<p>Here&rsquo;s a fun exercise. Once you&rsquo;ve created a list of your use cases, go through and assign a value to each based on how important you think it is to your users. Then check out your analytics tool and compare your assumptions to the <em>actual</em> engagement of each feature.</p>

<p>When you&rsquo;ve completed this process, you can begin to reprioritize. Are there secondary features that aren&rsquo;t seeing much traffic? Maybe they were failed attempts to grow your user base that you never got around to pulling out. Maybe there are features that used to be popular, but a competing technology rendered them obsolete. Can you identify any parts of the app that require a lot of upkeep, but aren&rsquo;t really serving your users? Here&rsquo;s the tough question: what can you remove?</p>

<p>Think about <a href="https://basecamp.com/">Basecamp</a>. They used to be <a href="http://37signals.com/">37Signals</a>, but in February 2014, they announced that they were dropping support for all of their applications aside from Basecamp. They whittled it down to what they knew was successful so that they could focus all of their resources on it.</p>

<p>You can do the same thing on a smaller scale. Focus on the part(s) of your application that made the business a success in the first place. Do your marketing and landing pages drive users to interact with that feature? Is it easy to get to? Is it easy to <em>use</em>? Are there other features or workflows that are getting in the way of users finding their way there?</p>

<p>If you can identify some features that you can lose, you can focus your resources on the things that bring users to your site. You free up energy to refine them and make sure they&rsquo;re solid and bug-proof. It also gives you room to experiment with <em>new</em> secondary features without overwhelming your users. I know one company with a well-established product that follows this rule: &ldquo;you can&rsquo;t add a feature unless you remove one.&rdquo;</p>

<p><a href="https://gettingreal.37signals.com/ch05_Start_With_No.php">Don&rsquo;t build yet</a>, even if you have customers clamoring for it. Remove the cruft first. Think of it as refactoring at an application level.</p>

<h3>Consider Splitting Out Services</h3>

<p>In <a href="http://quickleft.com/blog/ramping-up-developers-on-code">part one of this series</a>, we talked a bit about refactoring your application code. If you do a little bit of refactoring, and find yourself getting into this whole code extraction thing, maybe you want to go whole hog. Talk with your engineers about whether it makes sense to extract an entire part of your app into a separate service. Some good candidates include: <a href="http://fluxusfrequency.github.io/blog/2015/03/01/serving-custom-json-from-your-rails-api-with-activemodel-serializers/">exposing a REST API</a>, <a href="https://blog.engineyard.com/2014/wrapping-your-api-in-a-ruby-gem">creating a gem</a> to talk to your API, <a href="https://quickleft.com/blog/how-to-create-and-expire-list-items-in-redis/">storing data that&rsquo;s shared with other applications</a>, or integrating with an Elastic Search service.</p>

<p>In some cases, starting a whole new code base can take a lot of time, and might not be worth it. On the other hand, if it&rsquo;s hard to make changes in the code you&rsquo;ve already got, sometimes extracting a service can actually speed things up. With a smaller surface area, and code written by people who <em>currently</em> work for your company, it&rsquo;s easier for folks to grok what&rsquo;s going on. This leads to faster development.</p>

<p>If you do go down the road of extracting services, your team should take the time to define clear boundaries between the old app and the new one, and describe how they will interact in detail. For example, if you&rsquo;re pulling out an API, you might want to come up with a sample JSON response and the HTTP Status Codes that will be used <em>before</em> you build it. Defining the limitations and structure beforehand can keep a project like this from dragging on endlessly.</p>

<h3>Use MVP To Figure Out Where To Go Next</h3>

<p>A lot of people don&rsquo;t realize it, but a Minimum Viable Product (MVP) isn&rsquo;t just the first version of the thing you&rsquo;re building. It&rsquo;s actually a process. A way of testing out the market to find out whether things you <em>think</em> that people will like are <em>actually</em> things that people will like.</p>

<p>If you haven&rsquo;t tried driving your business this way, you should! Instead of just guessing what you should build next, or building whatever customers ask for, you can actually find out using research and numbers. Customer requests are great, but spiking on new features and getting information from analytics and customer feedback can really help you hit a home run.</p>

<p>Here&rsquo;s basic gist of MVP. You start with an idea. It might be an app. It might be a feature. Either way, you build <em>just enough</em> to find out whether it makes sense to invest further in your idea. How do you find out? Measure user response with clicks and sign-ups that actually go nowhere, and use analytics, questionnaires, interviews, and emails. When you&rsquo;ve got data, analyze it. Do they love it? Keep going! Was it a partial success? Ask yourself: what can I keep, what can I lose? Otherwise, pivot or abandon your idea. Build something else. Measure its success. Analyze your data. Repeat.</p>

<p>For a more specific walk-through of using MVP to drive your business direction, check out my <a href="https://blog.engineyard.com/2015/actually-mvp">Actually MVP post</a>.</p>

<p>Assuming you&rsquo;re getting ready to scale up your app, you probably already have some ideas about what you want to build. Stop for a second, and consider adding a couple of months of MVP-driven development to your roadmap instead.</p>

<h2>Wrapping Up</h2>

<p>In this post, we looked at ways to find your strategic direction when beginning work on a product that&rsquo;s been on ice for a while. We talked about how to decide what to remove, what to extract, and what to build next. Hopefully, the process I&rsquo;ve outlined here has got you thinking about how to prioritize your best features. Now, it&rsquo;s up to you to build <em>the next big thing</em>. Best of luck!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Bring Back Your App: Ramping Up Developers On Code]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/10/05/bring-back-your-app-ramping-developers-up-on-code/"/>
    
    <updated>2015-10-05T20:52:27-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/10/05/bring-back-your-app-ramping-developers-up-on-code</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/ramping-up-developers-on-code/">The Quick Left Blog</a></p>

<h2>Introduction</h2>

<p>Remember the glory days? Your company had it all! New signups every day. Coverage on the hottest blogs. Money was rolling in hand over fist. All thanks to your hot app. You and your goons really nailed it when you followed an <a href="https://quickleft.com/blog/actually-mvp/">MVP</a> process and built just the thing the market was looking for.</p>

<p>But then something happened. You shifted focus to integrating with another company&rsquo;s API. Or you lost your entire developer team. Slowly, kudzu vines covered over what was once a glorious app. The technology you used to build grew outdated. Bugs accumulated, but there was no time to fix them. You shed a single tear when you thought back to the glory days.</p>

<p>Finally, a new day dawned! You got a funding round! You&rsquo;ve just hired a new team of developers. They start next week. You can&rsquo;t wait to get them slinging code. But are you ready? Starting a new team on an old app isn&rsquo;t as easy as handing them laptops and saying &ldquo;clone down the repo&rdquo;. In this post, the first of a two-part series, we&rsquo;ll take a look at some advice you can use when ramping up developers on code in a legacy application. When we&rsquo;re through, you&rsquo;ll be ready to let the good times roll again!</p>

<h2>Have An Easy Setup Process</h2>

<p>Getting developers set up on a project can be time-consuming. Maybe you&rsquo;re planning to write off two days for each person to set up their laptop, get the application and its dependencies installed, and familiarize themselves with the codebase. If it&rsquo;s just one or two developers, you can probably justify four days of lost time. But what if you&rsquo;re bringing on a team of ten? And what if they could get set up in one day? Or even half a day? That would be 15 days spent on developing new features and bringing in more money!</p>

<p>So how can you get them up and running faster?</p>

<h3>Documentation</h3>

<p>Documentation is <em>so</em> important. I can&rsquo;t possibly recommend it enough. As a consultant, it&rsquo;s one of the first things I look for when checking out a new code base. Docs are the most efficient way to get a new team member up and running. If they&rsquo;re up-to-date, new devs can <em>read</em> about the project architecture and setup process, instead of having one of your more experienced developers take the time to sit down and explain it.</p>

<p>There are many effective ways to make documentation accessible to your team. I&rsquo;ve seen companies have success with their <a href="https://help.github.com/articles/about-github-wikis/">GitHub project wiki</a>, <a href="https://www.atlassian.com/software/confluence">Atlassian Confluence</a>, a <code>docs</code> folder in their app repo, or a separate <code>docs</code> repo on GitHub.</p>

<p>Document as much as you can. Your main application should have a thorough <code>README</code>. It&rsquo;s the first thing people will see when visit the GitHub repository. If you&rsquo;re running separate server and front-end apps, there should be a way to understand what has to be done to get them to talk to each other in development. How do you install the dependencies? How do you run the tests?</p>

<p>Sometimes, project setup can get held up by weird system setup issues. Maybe the app used to run on a pre-Yosemite version of OS X, but when you try to install it on Yosemite, it runs into problems with Nokogiri. I recommend creating a <code>troubleshooting</code> document and putting errors and their fixes into it. At <a href="https://quickleft.com/">Quick Left</a>, we cut our dev setup time by several hours when we introduced a <code>troubleshooting</code> doc in the <a href="https://sprint.ly/">Sprint.ly</a> repo. It also allowed senior members of the team to stay focused, instead of context switching to help people.</p>

<p>Some other good things to document include: language style guides, office culture, <a href="https://quickleft.com/blog/pull-request-templates-make-code-review-easier/">PR templates</a>, things to look for in PR review, QA tasks, and deploy steps.</p>

<h3>Docker</h3>

<p>We live in an exciting time. The dawn of containers has made it easier than ever to make sure that each person working on a project is working with the same system setup. I like to use <a href="https://www.docker.com/">Docker</a> to facilitate running applications across all environments, from development to CI to production. If you&rsquo;ve never created a container before, I recommend checking out my colleague Alex Johnson&rsquo;s <a href="https://quickleft.com/blog/sailing-past-dependency-hell-with-docker-distributed-systems/">Sailing Past Dependency Hell With Docker</a>.</p>

<p>Docker isn&rsquo;t right for every team, but if you have the knowledge and time to get it set up, it can save hours of time that would otherwise be spent googling errors and entering arcane commands into SSH tunnels. I&rsquo;d recommend looking into it.</p>

<h2>Pay Off Technical Debt</h2>

<p>Great documentation is a good first step, but often it isn&rsquo;t enough to ramp up developers on code in a reasonable amount of time on its own. If your app has accrued significant amounts of technical debt, this can present a major milestone. There are two kinds of tech debt to look for: dependency debt and native debt. Here are some ways to pay down each.</p>

<h3>Dependency Debt</h3>

<p>If your app was built back in the heyday of <em>(name your tech stack here)</em>, you probably made use of a lot of open source packages that were popular and well-maintained at the time. But fast-forward a few years, and suddenly some of your dependencies are outdated, others deprecated. This can be not only frustrating, but also a potential security concern.</p>

<p>If this describes you, you&rsquo;ve probably missed some patches that deal with widely publicized security issues. This can be a concern for open source packages and languages alike. For example, if you&rsquo;re still running Ruby 2.1.1, you might find that you&rsquo;re vulnerable to DNS Hijack attacks and <a href="http://www.cvedetails.com/vulnerability-list/vendor_id-7252/product_id-12215/version_id-164073/Ruby-lang-Ruby-2.1.1.html">other security holes</a>.</p>

<p>It&rsquo;s safest to invest a couple of days getting your language and dependency versions updated <em>before</em> bringing on a bunch of new developers. Not only will this fix your security holes, it will save you tons of time in working out module version conflicts.</p>

<h4>Gems &amp; Modules</h4>

<p>If your app is built in Ruby or JavaScript, you&rsquo;re probably making use of <a href="http://bundler.io/">Bundler</a> or <a href="https://www.npmjs.com/">NPM</a> to resolve dependency versions and pull them down. In your <code>Gemfile</code> or <code>package.json</code>, you may be specifying the specific versions of packages you want to use, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span>                  <span class="s1">&#39;~&gt; 3.2.17&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span><span class="p">,</span>           <span class="s1">&#39;~&gt; 2.1.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mysql2&#39;</span><span class="p">,</span>                 <span class="s1">&#39;~&gt; 0.3.11&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;devise&#39;</span><span class="p">,</span>                 <span class="s1">&#39;~&gt; 2.2.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;cancan&#39;</span><span class="p">,</span>                 <span class="s1">&#39;~&gt; 1.6.8&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span>               <span class="s1">&#39;~&gt; 1.5.6&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;config&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.10.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;hapi&quot;</span><span class="o">:</span> <span class="s2">&quot;8.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;hapi-auth-cookie&quot;</span><span class="o">:</span> <span class="s2">&quot;^2.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;superagent&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.2.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your new developers pull down the repo, run <code>bundle install</code> or <code>npm install</code>, and soon find out that you actually <em>can&rsquo;t</em> install some things on the latest version of OS X without passing special flags.</p>

<p>Or maybe you realize that the authentication gem you&rsquo;re using is one or two major versions behind the latest release. Fine, you think, and update the version specification. But then, when you try to run the install, you have version conflicts with another gem.</p>

<p>I have yet to find a good way to resolve all of these problems at once. The best approach I&rsquo;ve found is to start with the module that you most need to update. Bump its version, then try running the <code>install</code>. If there&rsquo;s a dependency version conflict, change that. Keep following this pattern until the waterfall of pain subsides. Then repeat the process with the next package that you know needs updating. If you run into issues, sometimes a <code>bundle update</code> or deleting the <code>node_modules</code> folder completely and reinstalling can get you closer to success.</p>

<h4>The Rails Upgrade By Version Trick</h4>

<p>When it comes to updating Ruby gems, I&rsquo;ve come across nothing more painful than updating <a href="http://rubyonrails.org/">Rails</a> across multiple versions. I&rsquo;ve recently been working on upgrading an old Rails 3.1 app to Rails 4.2 for a client. When I try updating the gem version all at once, I get so many regressions and new bugs that I don&rsquo;t even know where to start.</p>

<p>There is a better way. Begin by upgrading Rails one <em>minor</em> version at a time. So, if you&rsquo;re on 3.1, upgrade to 3.2 before attempting to go to 4.0. Then go on to 4.1 and 4.2. There&rsquo;s a <a href="https://rubygems.org/gems/rails/versions">list of Rails releases</a> you can use to drive this process. I&rsquo;ve also found this <a href="http://www.rails-upgrade-checklist.com/">Rails Upgrade Checklist</a> site pretty helpful. It lets you know all the deprecations you need to change for each version along the way.</p>

<h3>Native Debt</h3>

<p>So you&rsquo;ve got all of your dependencies updated, and installing your app is a breeze. You can get a new developer from zero to sixty in an hour. Great! But now, do they actually understand anything about what&rsquo;s going on in the code base?</p>

<p>If you&rsquo;re lucky, your last team wrote clear, understandable code with lots of comments and no duplication. In reality, the odds of that are pretty low. Because of customer demands and pressure on time and budget, every code base ends up with some cruft, duplication, and just plain cryptic parts.</p>

<p>Take the time before your new team rolls on to clean things up a little bit. It will be invaluable in getting them up and running, ready to be part of the conversation on architectural decisions. Here a couple of steps you can take to get there.</p>

<h4>Refactor</h4>

<p>You&rsquo;ve heard it before: if you practice agile development, you need to refactor. It&rsquo;s something you should be doing along the way if you&rsquo;re practicing Test Driven Development. The mantra goes: <code>red, green, REFACTOR</code>. Nevertheless, there are probably dozens of places that your code could benefit from some refactoring.</p>

<p>If your team is new to refactoring, I highly recommend the <a href="http://martinfowler.com/books/refactoring.html">Refactoring book</a> or its <a href="http://martinfowler.com/books/refactoringRubyEd.html">Ruby counterpart</a>. You don&rsquo;t have to become refactoring experts, just pick up a couple of patterns and go to town. Most of the time, there is some kind of smell that&rsquo;s repeated throughout the codebase. If you learn to identify it, it becomes easy to identify and snipe.</p>

<p>Generally speaking, I&rsquo;ve found that the easiest wins are to <code>extract</code> and <code>inline</code> code. This works at any level of scope. If you have a big, unweildy method that&rsquo;s doing a lot, you can <a href="http://fluxusfrequency.github.io/blog/2014/01/10/refactoring-1-extract-method/">extract a method</a> from it. If you have a class calling a method that doesn&rsquo;t make any sense, you might want to <a href="http://fluxusfrequency.github.io/blog/2014/01/17/refactoring-2-replace-method-with-method-object/">extract an object</a>. You can also go the other way: if there&rsquo;s some unnecessary indirection, you can pull code right into the class or method that needs it.</p>

<p>Spending a day or two refactoring the hairiest parts of you application can make things  understandability. That makes a big difference in your team&rsquo;s  efficiency.</p>

<h4>Delete Dead Code</h4>

<p>Related to refactoring, another great way to reduce the mental overhead involved in starting with a new app is to remove dead code.</p>

<p>One easy win is to &ldquo;snipe&rdquo; unused dependencies. You should also look through the codebase and remove any functions or methods that are old and not being used anymore. It can be hard to determine where exactly those spots are. If you have someone who&rsquo;s familiar with the code, asking them can be a good place to start.</p>

<p>My colleague <a href="https://quickleft.com/blog/author/mgayhart/">Meeka Gayhart</a> also suggests cleaning up cruft by looking for all the places where a package or method is called, and removing it if there aren&rsquo;t any callers in the current code. You can also look through git history to confirm using the <a href="http://www.philandstuff.com/2014/02/09/git-pickaxe.html">git pickaxe</a>.</p>

<p>If you have a good test suite, make sure to run it often as you remove suspect bits of code to make sure nothing broke.</p>

<p>Take the time to clean up your code base before new developers roll on, it can save huge amounts of time. New devs don&rsquo;t have to work as hard to understand what&rsquo;s going on, so they can spend those mental cycles shipping new features instead.</p>

<h2>Wrapping Up</h2>

<p>In this post, we looked at a couple of strategies for getting a new team ready to develop on an old code base. We looked at how to streamline the technical set up process, some tips for updating dependencies, and ways to pay down technical debt.</p>

<p>There are few things more exciting to a major stakeholder in an application than seeing it rise from the ashes to conquer the world a second time. I hope these tips help get you back to the glory days! Stay tuned for part two of this series, where we&rsquo;ll take a look at some higher-level planning ideas that can help ensure you make the most of your development time from here.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Testing Flux Applications]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/09/17/testing-flux-applications/"/>
    
    <updated>2015-09-17T06:29:28-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/09/17/testing-flux-applications</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://quickleft.com/blog/testing-flux-applications/">The Quick Left Blog</a></p>

<h2>Introduction</h2>

<p>A lot of people in the JavaScript community are pretty excited about Facebook&rsquo;s <a href="http://facebook.github.io/react/">React</a> library, and associated <a href="http://facebook.github.io/flux/">Flux</a> architecture. We&rsquo;ve been using quite a bit of these tools in our client-side projects at Quick Left. It can be a little hard to wrap your mind around the way the data flows at first, but once you get used to it, you come to appreciate how clean it can be.</p>

<p>As with any development, test-driving features is the way to go in a Flux app. As I&rsquo;ve been learning this technology, I&rsquo;ve been collecting some of the less obvious patterns that make testing easier. In this post, we&rsquo;ll take a look at some of these strategies, to make it easier for you to build the next big thing.</p>

<h2>Setup</h2>

<h3>Project Structure</h3>

<p>Since Flux is a more of an idea than a framework, there&rsquo;s no convention as to how to structure your project. I personally like to break it down in a fairly obvious fashion, with the different Flux objects grouped together by folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/
</span><span class='line'>├── actions
</span><span class='line'>├── collections
</span><span class='line'>├── dispatchers
</span><span class='line'>├── lib
</span><span class='line'>├── models
</span><span class='line'>├── stores
</span><span class='line'>└── views</span></code></pre></td></tr></table></div></figure>


<p>There are a couple of places to put the tests, but I&rsquo;ve been leaning toward a pattern where the tests live right alongside their corresponding files. This makes it easy to find the test for a given module. It also keeps the directory structures from getting out of sync, as they might if you put everything into a separate <code>test/</code> folder. Here&rsquo;s an example of what this might look like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/
</span><span class='line'>├── actions
</span><span class='line'>|   |── user-actions.js
</span><span class='line'>|   |── user-actions-test.js
</span><span class='line'>├── collections
</span><span class='line'>├── dispatchers
</span><span class='line'>├── lib
</span><span class='line'>├── models
</span><span class='line'>├── stores
</span><span class='line'>|   |── users-store.js
</span><span class='line'>|   |── users-store-test.js
</span><span class='line'>└── views
</span><span class='line'>    |── login.js
</span><span class='line'>    |── login-test.js</span></code></pre></td></tr></table></div></figure>


<p>When we find the files to run in our test suite, we can just use <a href="https://www.npmjs.com/package/glob">globbing</a> to find them all, so it doesn&rsquo;t really present any problems for setting up our tests.</p>

<h3>Testing Dependencies</h3>

<p>Facebook recommends using their testing tool, <a href="https://facebook.github.io/jest/">Jest</a>, to test React and Flux components. Although I totally respect Jest, <a href="https://github.com/facebook/jest/issues/139">it doesn&rsquo;t run in the browser</a>, plus I&rsquo;m pretty used to the toolchain I&rsquo;m about to describe, so I go about things a slightly different way.</p>

<h4>Mocha + Chai</h4>

<p>When it comes to testing frameworks, I&rsquo;m a big fan of <a href="http://mochajs.org/">Mocha</a>. It gives us <code>describe</code> and all of the other <a href="">BDD-style</a> assertions we could want when combined with <a href="http://chaijs.com/">ChaiJS</a>.</p>

<h4>Sinon</h4>

<p>Since there are a lot of dependencies in a Flux app, we&rsquo;ll probably be doing a lot of stubbing. I like to use <a href="">SinonJS</a> for this purpose. It gives us stubs and spies, and its API provides the ability to drill down into how functions were called and with what arguments with a level of granularity that can come in really useful.</p>

<h4>Karma</h4>

<p>When it comes to test runners, there are many viable choices. Lately, I&rsquo;ve been leaning toward <a href="">Karma</a> for most of my needs, because it&rsquo;s easy to get set up, and it can be hooked into a coverage tool with ease.</p>

<p>Here&rsquo;s an example <code>karma.conf</code> file for a Flux app in ES6 with <a href="">Browserify</a> and <a href="">Babel</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;mocha&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;app/**/*-test.js&#39;</span> <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;app/**/*.js&#39;</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;browserify&#39;</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">browserify</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;app/**/*-test.js&#39;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nx">transform</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span><span class="s1">&#39;babelify&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">sourceMapRelative</span><span class="o">:</span> <span class="s1">&#39;./app&#39;</span> <span class="p">}]</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;Chrome&#39;</span> <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">singleRun</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Coverage</h4>

<p>If you&rsquo;re interesting in setting up a coverage tool to see how well-tested your code base is, check out my post <a href="https://quickleft.com/blog/measuring-clientside-javascript-test-coverage-istanbul/">Measuring Clientside JavaScript Test Coverage With Istanbul</a>.</p>

<h4>NPM Build Scripts</h4>

<p>As far as running tasks, you can rely on Grunt or Gulp, or you can just set a test script up in your <code>package.json</code> file. Doing it this way, running tests is as simple as typing <code>npm test</code>. Here&rsquo;s what to put into <code>package.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;NODE_ENV=test ./node_modules/karma/bin/karma start&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these dependencies set up, you&rsquo;re all ready to start writing tests. Let&rsquo;s take a look at some of the testing specifics.</p>

<h2>Actually Writing Tests</h2>

<p>There are four parts to a Flux app: <code>Actions</code>, <code>Stores</code>, <code>Views</code>, and <code>Dispatchers</code>.</p>

<p>As mentioned above, Flux is more of a pattern than a framework. Although several people have released experimental frameworks built in its image, there is only one official Facebook package, called <code>flux</code>. Ironically, it only contains a <code>Dispatcher</code>. You can find the source code <a href="https://github.com/facebook/flux">here</a>. Since this package works well and is tested externally, so we won&rsquo;t be looking at testing <code>Dispatchers</code> in this post.</p>

<p>Before we get into looking at the remaining parts of Flux in depth, here are a couple of tips that come in handy in all cases.</p>

<h3>Any Object</h3>

<h4>Setting Up A Sandbox</h4>

<p>Sinon sandboxes are a great way to use stubs and spies without having to restore the objects they&rsquo;re touching later. You can clean things up automatically by setting up a new sandbox before each test and tearing it down afterwards.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">sandbox</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Getting Dependencies</h4>

<p>Sometimes it can be a pain to pull in and/or stub a bunch of dependencies for an object you&rsquo;re testing. There&rsquo;s an easy way to grab what you need from within the test: using <a href="https://github.com/jhnns/rewire">Rewire</a>, which exposes a special <code>__get__</code> method you can use to access whatever you need from the top level scope of the module. You can then stub out methods and properties on those modules. Here&rsquo;s how to leverage it to your advantage.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">sandbox</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="nx">MyAction</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;something related to todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;doesnt have to care about todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">todos</span><span class="p">,</span> <span class="s1">&#39;getAll&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// do something else that calls this.todos.getAll without worrying about the result</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a note, you don&rsquo;t even need to use Rewire unless you need access to instance variables on your objects. Since Flux uses plain objects, multiple calls to <code>require</code> will always return the same object. This means that you can just spy on or stub out a method on one of your <code>Actions</code> or <code>Stores</code> directly after requiring them.</p>

<h3>Actions</h3>

<h4>Testing Event Dispatching</h4>

<p>When you&rsquo;re writing a Flux action, it typically sends some kind of event and payload to the <code>AppDispatcher</code> to trigger events registered elsewhere in the application. It&rsquo;s easy to spy on the <code>AppDispatcher</code> and test that it&rsquo;s called with the right arguments to ensure that your <code>Action</code> is working properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// my-action.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">myCollection</span> <span class="nx">from</span> <span class="s1">&#39;../collections/my-collection&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">AppDispatcher</span> <span class="nx">from</span> <span class="s1">&#39;../dispatchers/app-dispatcher&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">MyAction</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">loadModels</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">myCollection</span><span class="p">.</span><span class="nx">fetch</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">actionType</span><span class="o">:</span> <span class="s1">&#39;COLLECTION_LOAD&#39;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">MyAction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// my-action-test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">MyAction</span> <span class="nx">from</span> <span class="s1">&#39;./my-action&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">AppDispatcher</span> <span class="nx">from</span> <span class="s1">&#39;../dispatchers/app-dispatcher&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Backbone</span> <span class="nx">from</span> <span class="s1">&#39;backbone&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;dispatches an event&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">spy</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(</span><span class="nx">AppDispatcher</span><span class="p">,</span> <span class="s1">&#39;dispatch&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">MyAction</span><span class="p">.</span><span class="nx">loadModels</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sinon</span><span class="p">.</span><span class="nx">assert</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">spy</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Testing Promises</h4>

<p>We often load data from a remote server in our <code>Action</code> objects, so there are typically a lot of promises involved in its internals. When testing these methods, it&rsquo;s often useful to stub out these promises. It&rsquo;s pretty easy to do using native promises in ES6. Note that we use <code>setTimeout</code> and <code>done</code> to ensure that the promise is fully resolved before testing our assertion and moving on to the next test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// search-action.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">searchClient</span> <span class="nx">from</span> <span class="s1">&#39;../lib/search&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">AppDispatcher</span> <span class="nx">from</span> <span class="s1">&#39;../dispatchers/app-dispatcher&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">SearchAction</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">search</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">actionType</span><span class="o">:</span> <span class="s1">&#39;SEARCH_START&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">query</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">searchClient</span><span class="p">.</span><span class="nx">search</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">actionType</span><span class="o">:</span> <span class="s1">&#39;SEARCH_SUCCESS&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">payload</span><span class="o">:</span> <span class="nx">results</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">SearchAction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// search-action-test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">SearchAction</span> <span class="nx">from</span> <span class="s1">&#39;./search-action&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;search&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;results&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">failure</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">reject</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">searchStub</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchClient</span><span class="p">,</span> <span class="s1">&#39;search&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;dispatches a SEARCH_SUCCESS event&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">appDispatcher</span> <span class="o">=</span> <span class="nx">SearchActions</span><span class="p">.</span><span class="nx">__get__</span><span class="p">(</span><span class="s1">&#39;AppDispatcher&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatchStub</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">appDispatcher</span><span class="p">,</span> <span class="s1">&#39;dispatch&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">searchStub</span><span class="p">.</span><span class="nx">returns</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">success</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">SearchAction</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;my_search&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">sinon</span><span class="p">.</span><span class="nx">assert</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchStub</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">actionType</span><span class="o">:</span> <span class="s1">&#39;SEARCH_SUCCESS&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;results&#39;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Stores</h3>

<p>In my own Flux projects, I have tried to keep the external API of <code>stores</code> as &ldquo;dumb&rdquo; as possible. They are meant to be simple repositories for business objects that expose an interface for other objects to subscribe to change events. I typically define methods named <code>emitChange</code>, <code>addChangeListener</code>, and <code>removeEventListener</code> for each store.</p>

<p>Despite their relatively simple API, it is vitally important to test your <code>stores</code>. They&rsquo;re usually the place where the business logic lives. Plus, they&rsquo;re responsible for loading data from the server into the client-side app. For these reasons, we want to make sure they work properly. Here are a couple of tricks that can be helpful.</p>

<h4>Using Internals</h4>

<p>Given that <code>stores</code> are only supposed to accept data through the callback they register with the <code>dispatcher</code>, it can be tricky to send mocked data into them while testing. Facebook has one suggested way of doing it <a href="https://facebook.github.io/react/blog/2014/09/24/testing-flux-applications.html#testing-stores">with Jest</a>, or you can try <a href="http://bensmithett.com/testing-flux-stores-without-jest/">this approach</a> with Mocha or Jasmine. Alternatively, another nice way to hide the implementation a store uses to fetch its data is to wrap the fetch implementation in an <code>internals</code> object and test that instead. Here&rsquo;s what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="s1">&#39;lodash&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">EventEmitter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;events;</span>
</span><span class='line'><span class="s1">import Widgets from &#39;</span><span class="p">..</span><span class="o">/</span><span class="nx">collections</span><span class="o">/</span><span class="nx">widgets</span><span class="s1">&#39;;</span>
</span><span class='line'><span class="s1">import AppDispatcher from &#39;</span><span class="p">..</span><span class="o">/</span><span class="nx">dispatchers</span><span class="o">/</span><span class="nx">app</span><span class="o">-</span><span class="nx">dispatcher</span><span class="s1">&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">let WidgetStore = _.extend({}, EventEmitter.prototype, {</span>
</span><span class='line'><span class="s1">  emitChange() {</span>
</span><span class='line'><span class="s1">    this.emit(&#39;</span><span class="nx">change</span><span class="s1">&#39;);</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  addChangeListener(callback) {</span>
</span><span class='line'><span class="s1">    this.on(&#39;</span><span class="nx">change</span><span class="s1">&#39;, callback);</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  removeChangeListener(callback) {</span>
</span><span class='line'><span class="s1">    this.removeListener(&#39;</span><span class="nx">change</span><span class="s1">&#39;, callback);</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  getAll() {</span>
</span><span class='line'><span class="s1">    return this.widgets.toJSON();</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">});</span>
</span><span class='line'>
</span><span class='line'><span class="s1">WidgetStore.internals = {</span>
</span><span class='line'><span class="s1">  init() {</span>
</span><span class='line'><span class="s1">    this.widgets = new Widgets();</span>
</span><span class='line'><span class="s1">    return this.widgets.fetch().then(() =&gt; {</span>
</span><span class='line'><span class="s1">      this.emitChange();</span>
</span><span class='line'><span class="s1">    });</span>
</span><span class='line'><span class="s1">  }</span>
</span><span class='line'><span class="s1">};</span>
</span><span class='line'>
</span><span class='line'><span class="s1">AppDispatcher.register((action) =&gt; {</span>
</span><span class='line'><span class="s1">  switch(action.actionType) {</span>
</span><span class='line'><span class="s1">    case &#39;</span><span class="nx">INIT_WIDGETS</span><span class="err">&#39;</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">WidgetStore</span><span class="p">.</span><span class="nx">internals</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">WidgetStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it comes to testing this <code>internals</code> object, we can test that the <code>internals</code> methods are behaving as expected. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;internals&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">widgets</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">widgets</span><span class="p">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">resolve</span><span class="p">([</span><span class="s1">&#39;widget1&#39;</span><span class="p">,</span> <span class="s1">&#39;widget2&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;init&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;returns a promise&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">WidgetStore</span><span class="p">.</span><span class="nx">internals</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">WidgetStore</span><span class="p">.</span><span class="nx">widgets</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">([</span><span class="s1">&#39;widget1&#39;</span><span class="p">,</span> <span class="s1">&#39;widget2&#39;</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Using Dependency Injection</h4>

<p>If you write your <code>stores</code> in an object-oriented way, you can pass a reference to the <code>dispatcher</code> directly into them. This makes it easier to test that different dispatching events trigger the correct callbacks to produce the behavior that is desired. Here&rsquo;s an example (thanks to <a href="http://jaysoo.ca/2015/03/09/on-flux-stores-and-actions/">Jack Hsu</a> for the inspiration for this tip).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">WidgetStore</span> <span class="kr">extends</span> <span class="nx">Store</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">widgets</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatcher</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">dispatcher</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatcher</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">onWidgetAdded</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">onWidgetAdded</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">widgets</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now testing the store is simple. We can just inject a dispatcher and use it to trigger the events we want to test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;WidgetStore&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">widgetStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WidgetStore</span><span class="p">({</span> <span class="nx">dispatcher</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">dispatcher</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;WIDGET_ADDED&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">widget</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatcher</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">actionType</span><span class="o">:</span> <span class="s1">&#39;WIDGET_ADDED&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">payload</span><span class="o">:</span> <span class="nx">widget</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">widgetStore</span><span class="p">.</span><span class="nx">widgets</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()).</span><span class="nx">to</span><span class="p">.</span><span class="nx">haveLength</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>View Components</h3>

<p>Finally we come to the view layer. If you&rsquo;ve played with React, writing these view components should come naturally.</p>

<p>When it comes to testing, there are a lot of things you can safely skip, since testing them would just be verifying that React works as expected. For example, checking that <code>onClick</code> handlers fire is pointless, since we know that React will call them. On the other hand, it can be useful that the behavior we want them to cause is actually carried out.</p>

<h4>Wrap Components With StubRouterContext</h4>

<p>It&rsquo;s usually a good idea to wrap your components in a stubbed out context, to make it easier to force them to behave the way you want within your tests. If you don&rsquo;t, it can be hard to get them to render and behave as expected.</p>

<p>To get this to happen, I recommend using the <a href="https://gist.github.com/cmain/69aee0b5d9cab96589d7">stub-router-context</a> module from the <a href="https://github.com/rackt/react-router">react-router project</a>. It&rsquo;s useful for wrapping the context of all kinds of components aside from the React Router. Although I tend to stick to the name &ldquo;Stub Router Context&rdquo;, it would perhaps be more accurate to just call it &ldquo;stub context&rdquo;, since you can use it to stub out any context.</p>

<p>I also like to add a ref to the stub in the component that&rsquo;s returned in <code>render</code>, to make it easier to get hold of the component being wrapped by the component returned by <code>stub-router-context</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Component</span> <span class="nx">ref</span><span class="o">=</span><span class="s1">&#39;stub&#39;</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s how it looks when you include it in your test. Note how the ref I included makes it easy to grab the child and call <code>setState</code> on it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">stubRouterContext</span> <span class="nx">from</span> <span class="s1">&#39;../lib/stub-router-context&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Search</span> <span class="nx">from</span> <span class="s1">&#39;./search&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">Component</span> <span class="o">=</span> <span class="nx">stubRouterContext</span><span class="p">(</span><span class="nx">Search</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">component</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Component</span><span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;does the thing when the state is such&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">component</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">stub</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">isLoading</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Use the React TestUtils</h4>

<p>When it comes to rendering your component into a test DOM, checking whether classes are being dynamically added or removed, or whether input values are are changing in response to user interactions, the React TestUtils can&rsquo;t be beat. Get to know <a href="https://facebook.github.io/react/docs/test-utils.html">the TestUtils API</a>, and use it to test your view components. It makes things much less painful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">WidgetRepeater</span> <span class="nx">from</span> <span class="s1">&#39;./widget-repeater&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">stubRouterContext</span> <span class="nx">from</span> <span class="s1">&#39;../lib/stub-router-context&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">TestUtils</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;WidgetRepeater&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">Component</span> <span class="o">=</span> <span class="nx">stubRouterContext</span><span class="p">(</span><span class="nx">WidgetRepeater</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Add 10 midgets to the repeater</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">component</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Component</span><span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;shows the widgets&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">widgets</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">component</span><span class="p">,</span> <span class="s1">&#39;widget&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">widgets</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;sets the first widget active&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">activeWidgets</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">component</span><span class="p">,</span> <span class="s1">&#39;active&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">activeWidgets</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;changes widgets to active on click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">widgets</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">component</span><span class="p">,</span> <span class="s1">&#39;widget&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">secondWidget</span> <span class="o">=</span> <span class="nx">widgets</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">findDOMNode</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">secondWidget</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">activeWidgets</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">scryRenderedDOMComponentsWithClass</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">component</span><span class="p">,</span> <span class="s1">&#39;active&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">activeWidgets</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Committing to a test-driven development approach in client-side JavaScript applications can sometimes be a hard sell. Aside from problems with testing DOM manipulation and asynchronous code, it can also be hard to test patterns that are new to the team, like Flux. But with the right tools, it can become second nature to test some of these things. Once your team has the confidence that they can effectively test these components, it&rsquo;s a lot easier to approach all feature development with a TDD mindset.</p>

<p>In this post, we explored how to better test Flux applications. We took a look at some of the JS testing tools that can be helpful to get setup in your build process. We talked about some testing tips that are useful across all of the different Flux objects. Then we drilled down into testing tips specific to <code>Actions</code>, <code>Stores</code>, and <code>View Components</code>.</p>

<p>I hope that some of these tips come in useful for your team as you build your cutting-edge web application. Best of luck!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How I Deployed My First App To Deis]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/08/27/how-i-deployed-my-first-app-to-deis/"/>
    
    <updated>2015-08-27T06:30:43-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/08/27/how-i-deployed-my-first-app-to-deis</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="http://deis.com/blog/2015/how-deployed-my-first-app-to-deis">The Deis Blog</a></p>

<h2>Introduction</h2>

<p>Have you ever felt the pain that comes when your app runs fine on development, but breaks terribly in production? Maybe your CI build has been red for days, but you haven&rsquo;t had time to figure out how the CI server is misconfigured?</p>

<p>With containers, you can easily rid yourself of such dependency woes. If the app runs in a container on one machine, it will most likely run in the same container on another.</p>

<p>Once you&rsquo;ve bought into a container-based development workflow, the question soon arises: how can I get my production server to run my application in a container without the difficulty of having to provision a bare server with all of the other services, writing deploy tasks, and handling scaling issues on my own? In short, can I have a managed production environment that also supports containers?</p>

<p>The answer is yes. Using <a href="http://deis.io/">Deis</a>, an open source Platform as a Service, you can host and manage your Docker-based application using your own Amazon Web Services (AWS) servers, without the hassle of configuring a bare Linux server.</p>

<p>I recently deployed a simple Rails app to Deis, and took notes along the way. In this post, I&rsquo;ll share the steps I took to set up a <a href="https://try.deis.com/">Deis Pro</a> account and deploy a new application.</p>

<h2>Setting Up AWS</h2>

<p>Deis applications run on a cluster of servers tied to your AWS account. This allows you to control your settings with Amazon, and takes the middle man out of the billing process for server resources. Since I didn&rsquo;t have an AWS account, I had to create one. To do this, I followed <a href="https://support.cloud.engineyard.com/hc/en-us/articles/205501008-Before-You-Begin-Set-Up-Your-AWS-Account-and-User">this guide from Engine Yard</a>. Here&rsquo;s a quick run down of what I did.</p>

<p>First, I visisted <a href="http://aws.amazon.com">aws.amazon.com</a> and clicked on &ldquo;Create a Free Account&rdquo;. I walked through the signup process, entering my credentials and credit card information.</p>

<p>Once my account was all set up and I was logged in, I visited the &ldquo;Identity &amp; Access Management&rdquo; page, then clicked &ldquo;Groups&rdquo; on the sidebar. I then created a group called &ldquo;DeisAdminGroup&rdquo;.</p>

<p>Next, I created a user called &ldquo;deis_user&rdquo; under the &ldquo;Users&rdquo; tab. When I created it, Amazon asked me to download the user credentials in a CSV file, which I saved. Finally, I went back to &ldquo;Groups&rdquo;, selected my group, clicked &ldquo;Add Users to Group&rdquo;, and added &ldquo;deis_user&rdquo; to the group.</p>

<p>With these steps completed, I had my AWS user and security group set up. Next I turned my attention to setting up a Deis Pro account.</p>

<h2>Signing Up For Deis PRO</h2>

<p>Before I could deploy my app to Deis Pro, I had to <a href="https://try.deis.com/">sign up for an account</a>.</p>

<p>I filled out the form, and a few minutes later I got a verification email. I clicked the link in the email, then entered my billing information. Deis then asked for my AWS credentials. I entered the information saved in the CSV I downloaded when I was setting up AWS, and I was ready to go.</p>

<h2>Creating the Cluster</h2>

<p>Now that I was signed in to my Deis PRO account, I began to set up some server resources that I could deploy my application to. Here are the steps I followed to get them ready.</p>

<p>First, I visited my dashboard and clicked &ldquo;Create Environment&rdquo;. Since I didn&rsquo;t need any special performance resources or customizations, I just used the default options for server size and memory allocations. I created an administrator username and password.</p>

<p>Next, I created three servers on AWS using the Deis PRO UI as part of the &ldquo;create environment&rdquo; process. For me, this process failed the first time, but when I tried again, the servers eventually came online. The last thing before leaving the Deis PRO site was to make note of my Deis endpoint name (it looks like deis.1ab2345.my.ey.io) so that I could use it to configure my app from the command line.</p>

<h2>Installing Deis Locally</h2>

<p>After setting up my AWS and Deis accounts, I turned my attention to getting the <a href="http://docs.deis.io/en/latest/using_deis/install-client/">Deis command line client</a> installed on my development machine. It was as simple as running this <code>curl</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -sSL http://deis.io/deis-cli/install.sh | sh -s 1.7.3</span></code></pre></td></tr></table></div></figure>


<p>From there, I needed to put the <code>deis</code> executable into my <code>$PATH</code>. Although I could have used a symlink, I opted to move it directly to <code>usr/local/bin</code> with <code>mv deis /usr/local/bin/deis</code> instead. After running these two commands, I was able to run <code>deis -h</code>.</p>

<p>As a last step before setting up an app, I also needed to login to the server cluster I&rsquo;d created and add the SSH key from my local machine to it. I logged into my Deis endpoint using <code>deis login deis.1ab2345.my.ey.io</code>. The endpoint name was the one I got from the Deis Pro website when I was setting up my resources. I found the username and password for the cluster in the Deis PRO UI. After I logged in, I added my local SSH key with <code>deis keys:add</code>.</p>

<p>With the Deis CLI set up and connected to my server cluster, I was ready to begin deploying my application.</p>

<h2>Deploying The App</h2>

<p>When I was finishing bootcamp, I wrote an application called <a href="https://github.com/fluxusfrequency/12stepper">Twelve Stepper</a> to help 12 Step Program participants interact with friends, find meetings, and work with the steps. Since it&rsquo;s a fairly simple application, I thought it would be a good one to use for my first Deis deploy.</p>

<p>I cloned it down from GitHub, bundled my gems and ran migrations as I would for any other Rails project. I also made a <code>Dockerfile</code> and got the app running in a container locally. Then I set up a Deis project by running <code>deis create 12stepper</code> from within the project folder.</p>

<p>After that, I tried to deploy using <code>git push deis master</code>, but I ran into an error: <code>tar: invalid tar magic</code>. After doing a little research, I found that I had forgotten to include a <code>Procfile</code>, so I created one. After adding it to <code>git</code> and pushing again, my app successfully deployed.</p>

<p>I ran <code>deis open</code>, and there was my app, up and running on the web!</p>

<h2>Wrapping Up</h2>

<p>Getting Twelve Stepper set up on a Deis PRO cluster was pretty easy, all told. Most of my time was spent setting up accounts on AWS and Deis PRO and installing the Deis CLI. But these were one-time tasks. From here on out, deploying apps to Deis will be as easy as creating a new server cluster from my Deis PRO dashboard, then running <code>deis create &lt;appname&gt;</code> and <code>git push deis master</code> from my project folder.</p>

<p>I was surprised how easy it was to get my app up and running on a managed production environment using a container with Deis. If you&rsquo;re using a container-based development environment, I would definitely recommend checking Deis out as a hosting and deployment solution. Good luck!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Goodbye MVP, Hello v1]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/07/01/goodbye-mvp/"/>
    
    <updated>2015-07-01T06:28:45-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/07/01/goodbye-mvp</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/goodbye-minimum-viable-product-hello-v1">Engine Yard</a></p>

<h2>Introduction</h2>

<p>You&rsquo;ve done it! It all started with an idea and two people in your garage. After weeks of coding and tweaking, you&rsquo;ve proven that your business idea is the greatest thing since sliced bread. You used <a href="http://steveblank.com/2015/05/06/build-measure-learn-throw-things-against-the-wall-and-see-if-they-work/">the Build, Measure, Learn cycle</a> to find out what your customers want, and you&rsquo;re pretty sure you have a product market fit.</p>

<p>Now what?</p>

<p>It&rsquo;s time to build your V1. In the post, we&rsquo;ll look at how to take the most important lessons from the information you&rsquo;ve gleaned during the MVP stage of your product&rsquo;s lifecycle and apply them to building the first full release of your product.</p>

<h2>V0: Minimum Viable Product</h2>

<p>If you&rsquo;re interested in building the V1 of your project, you&rsquo;ve probably already spent a good amount of time iterating on features, measuring customer feedback, and learning more about what the market wants in your problem space. If you haven&rsquo;t started building an MVP, or are still working on it, check out <a href="https://blog.engineyard.com/2015/actually-mvp">my thoughts on MVP</a> and come back to this article when you think you&rsquo;re sure that your product is ready to be scaled.</p>

<p>If you <em>have</em> been using an MVP process, and you feel that you&rsquo;ve validated your assumptions, that people would like to use and pay for your product, you&rsquo;re probably ready to start thinking about building your V1. It&rsquo;s time to take all of the metrics and feedback you&rsquo;ve been gathering and put it together to make the first <em>complete</em> version of your product.</p>

<p>Before we continue, make sure you&rsquo;ve answered these questions. What are your target demographic and platform? Which features make up the core of your offering? Which have resulted in the most clicks and positive feedback?</p>

<p>With all of these things in hand, let&rsquo;s turn our attention to what it takes to release a V1.</p>

<h2>V1: The Final Frontier</h2>

<p>If you think about it, V1 is kind of a funny concept. If you&rsquo;ve been releasing MVP features for a while, you probably already have a functioning product. It might even be <em>complete</em>, in the sense that customers use it and pay for it, and aren&rsquo;t missing anything that they need to releave their pain points.</p>

<p>Yet it&rsquo;s definitely possible to draw a line in the sand between <em>beta</em> and <em>V1</em>. According to Wikipedia&rsquo;s definition of <a href="http://en.wikipedia.org/wiki/Software_versioning">Software Versioning</a>, the free-software community tends to define 1.0 as a &ldquo;major milestone, indicating that the software is &lsquo;complete&rsquo;, that it has all major features, and is considered reliable enough for general release&rdquo;.</p>

<p>Of course, we know better. After releasing a piece software, there will always changes big and small: security concerns corrected, features added, previously undiscovered instabilities fixed. To plan all of our features, set a date, and keep everything shrouded in secrecy until then is a hopelessly waterfall-esque approach that leads to a far more costly product.</p>

<p>In many ways, the distinction between beta and V1 is largely a marketing concern. As you iterate on an MVP, those brave souls known as <a href="">early adopters</a> are by your side, helping light the way. But once you tell the world that what you&rsquo;re offering is now a &ldquo;real&rdquo; product, you begin to see what the less brave among us are willing to buy. You&rsquo;ve potentially expanded your market greatly, by giving birth to &ldquo;The New (your product name here)&rdquo;.</p>

<p>Do you think your product has what it takes to convert this new audience to your cause? As my friend and colleague <a href="http://justinjackson.ca/">Justin Jackson</a> puts it, &ldquo;the real question is: can you profitably acquire new customers every month?&rdquo; MVP should show that you have some initial traction. V1 should show that you actually have a business.</p>

<p>Let&rsquo;s take a look at some strategies you can use to make your transition from MVP to V1 a successful one.</p>

<h4>Build A Roadmap</h4>

<p>Before you start writing stories for the big release, pause for a second and question your assumptions. You might be excited, because you think you&rsquo;ve got a handle on what your customers want, and you&rsquo;re ready to give it to them as soon as you can!</p>

<p>Stop. Take a breath. Think. How does what you&rsquo;re about to build fit in with the plans you have for your <em>business</em>?</p>

<p>If you don&rsquo;t have a roadmap, you should make one as soon as possible. It doesn&rsquo;t have to be an all-day exercise, but you should be able to answer some basic questions.</p>

<p>Do you know <em>which</em> features you&rsquo;re going to build? What about funding? If you don&rsquo;t have investors, does what you&rsquo;re about to build have the ability to attract them? If you do, are there certain things they&rsquo;re hoping you will build? Do you have a plan for scaling your development team? What about marketing? If all else fails, do you know how to pivot?</p>

<h3>Set A Deadline</h3>

<p>It&rsquo;s tempting to think of V1 as the chance to sit back, take your time, and do the waterfall thing. You&rsquo;ve moved fast and broken things to prove that you have a market fit, and now you can spend as long as you need to build the first stable version. That&rsquo;s a mistake. Getting to V1 is just a high-pressure as finding an MVP that proves its value.</p>

<p>You might have an initial MVP that&rsquo;s proven it has traction, put your head down for eight months to build V1, and by the time you release it, find out that you&rsquo;ve made a big mistake. Maybe the features you focused on building out turned out to be ones that customers wanted &ndash; it&rsquo;s just that they weren&rsquo;t willing to <em>pay</em> for them. Maybe another company beat you to market. Maybe you overlooked a key integration with another service that would have allowed you to <em>take off</em>. These are the kind of mistakes that you can&rsquo;t afford to make as a business.</p>

<p>Taking too long to get to V1 is just as bad as taking too long to build MVP. Make sure that you know where you&rsquo;re headed and when you&rsquo;ll get there.</p>

<h4>Identify Your Target Market</h4>

<p>If you&rsquo;re about to outgrow your MVP, you probably think you know your target market. But take a closer look. Your excitement <em>could</em> by hiding some assumptions. Can you get more granular about the different subdivisions that make up your user base, and use that information to find out more about who you&rsquo;re targeting?</p>

<p>Have you figured out <em>which</em> customers you should be listening to? Hint: <em>it&rsquo;s the ones that would actually</em> pay <em>for your service</em>. When you were building an MVP, you proved that you could find paying customers. In V1, you want to prove that you can <em>consistently</em> pick up new customers that will pay you more than it costs you to provide your service to them.</p>

<p><a href="http://justinjackson.ca/ultimate-validation/">Justin Jackson</a> weighs in again: &ldquo;To be successful, a product needs customers that are easy to reach, cheap to convert, and undemanding to support&rdquo;.</p>

<p>To dig deeper into these questions, I highly recommend going through a <a href="https://quickleft.com/packages/ux-design/">User Experience (UX) discovery process</a>. You should create <a href="http://www.usability.gov/how-to-and-tools/methods/personas.html">personas</a> and think about the emotional response that you are hoping to evoke. UX discovery can help answer important questions, like: &ldquo;should we move to mobile?&rdquo; and &ldquo;what are our key features?&rdquo;</p>

<h4>Identify Your Key Features And Cut The Rest</h4>

<p>A huge part of the MVP process is measuring customer engagement with the different features you&rsquo;re testing. Pull out all of our customer interviews and surveys. Read through the reports in your analytics software. Make a list of all the features that you&rsquo;ve had success with, and rank them. Which ones were the most popular?</p>

<p>Your V1 should focus on your core features <em>only</em>. Cut the rest. Remember, for each feature you add, you have to think not only about the feature, but also tests, regressions, and bugs. <em>Plus</em>, you&rsquo;ll be dealing with scaling your business. Employees, culture, and performance are going to be concerns in a way that they weren&rsquo;t during the MVP process. Keep it simple.</p>

<h3>Build A Strong Cultural Foundation</h3>

<p>The business you build when you&rsquo;re going to V1 sets stage for everything that will come after. Now is the time to think about what kind of company you want to create. You will want to make decisions that build a strong foundation for what&rsquo;s to come.</p>

<p>You will be hiring new developers. The culture you inspire and the process you set up for five developers are the blueprints that will be followed when you get to fifty. The process you use to acquire new customers had better be scalable, or you could find your pipeline going dry a few months down the road.</p>

<p>Take the time to think through what kind of place you would like to work in, and try to manifest that reality as you build your V1.</p>

<h3>Build A Strong Technical Foundation</h3>

<p>If you&rsquo;ve done a good job of building MVP features at a minimal cost, you probably already have some technical debt that needs to be paid down. This is the time to switch out stopgap measures for a scalable tech stack.</p>

<p>Maybe you proved your concept with a simple WordPress site, an email list, or one of the other simple MVP approaches I discussed in <a href="https://blog.engineyard.com/2015/actually-mvp">my MVP article</a>. These are all great ways to get started, but they&rsquo;re not very customizable. If you&rsquo;re stuck with the features that you get with a certain WordPress plugin, you might find yourself unable to extend or change your features in a timely and stable manner down the road. Plus, moving away from plugins often cuts out the middleman and allows you to recover some capital that you were spending on things you can provide in-house.</p>

<p>Take the time to consider what kind of tech stack will meet your needs. Take the time to understand the tradeoffs between different technologies in the market, and find the ones that best meet your business&rsquo;s needs. It can be useful to do a <a href="https://quickleft.com/packages/discovery-sprint/">discovery sprint</a> to find out what options are available to you.</p>

<p>Find ways to ensure that your code remains working and stable. I highly recommend following a <a href="https://quickleft.com/blog/how-to-write-tests-first/">Test-Driven Development process</a>, writing functional tests, signing up for <a href="https://codeclimate.com/">Code Climate</a>, setting up a continuous integration service like <a href="http://wercker.com/">Wercker</a>, <a href="https://travis-ci.org/">TravisCI</a>, or <a href="https://circleci.com/">CircleCI</a>, and deploying to a staging server before releasing things to production. These safeguards will protect you and your team from accidentally breaking your application, and be the canary in the coal mine to let you know when things are about to go wrong.</p>

<p>Finally, make sure you&rsquo;re thinking about scale. If you&rsquo;re hoping to get tons of new users you&rsquo;ll want to have infrastructure in place that will allow you to serve a heavy load of users. If you&rsquo;re using <a href="https://www.engineyard.com">Engine Yard</a>, it&rsquo;s easy to upgrade your servers from your dashboard with a few clicks, plus they&rsquo;re always monitoring your app for emerging issues, and their support team is immediately available to support you as you respond to a high volume of requests.</p>

<p>As you start building your first release, make sure that you&rsquo;re investing in technologies that will support your business as it grows.</p>

<h2>Conclusion</h2>

<p>The move from MVP to V1 is a moment of transition for your business. It&rsquo;s vital to consider the norms that you&rsquo;re about to set up, which will have far-reaching effects into the future. You have to be smart. Know your customers, know your features, and don&rsquo;t delay. But also build a strong foundation, culturally and technically. Finally, set a deadline and stick to it. This lets you build the buzz, keep your team focused, and provides a great excuse to throw a big party. Just don&rsquo;t forget to invite me!</p>

<p>Until then, best of luck with your business.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A Smooth Transition to ECMAScript 6: Using New Features]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/06/10/a-smooth-transition-to-ecmascript-6-using-new-features/"/>
    
    <updated>2015-06-10T06:28:33-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/06/10/a-smooth-transition-to-ecmascript-6-using-new-features</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/smooth-transition-ecmascript-6-new-features">Engine Yard</a></p>

<h2>Introduction</h2>

<p>In <a href="https://blog.engineyard.com/2015/smooth-transition-ecmascript-6-integration">part one of this miniseries</a>, we talked about the timeline for ES6 rollout, feature compatibility in existing environments and transpilers, and how to get ES6 set up in your build process.</p>

<p>Today, we’ll continue the conversation, looking at some of the easiest places to start using ES6 in a typical front-end <a href="https://blog.engineyard.com/2015/integrating-react-with-backbone">Backbone + React</a> project. Even if that&rsquo;s not your stack, read on! There&rsquo;s something for everyone here.</p>

<p>If you want to try out the examples, you can use a sandboxed ES6 environment at <a href="http://www.es6fiddle.net/">ES6 Fiddle</a>.</p>

<h2>New Features</h2>

<h3>Classes, Shorthand Methods, and Shorthand Properties</h3>

<p>A lot of client-side JS code is object-oriented. If you&rsquo;re <a href="http://mikefowler.me/2014/06/11/backbone-with-es6/">using Backbone</a>, just about every Model, Collection, View, or Router you ever write will be a subclass of a core library Class. With ES6, extending these objects is a breeze. We can just call <code>class MySubclass extends MyClass</code> and we get object inheritance. We get access to a <code>constructor</code> method, and we can call <code>super</code> from within any method to apply the parent class&rsquo;s method of the same name. This prevents us from having to write things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also get some handy shorthands for defining methods and properties. Note the pattern I&rsquo;m using to call <code>initialize</code> instead of <code>initialize: function(args) {}</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">UserView</span> <span class="kr">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also define properties using a nice new shorthand. The code below sets an <code>app</code> property on the <code>Injector</code> that points to the instance of <code>App</code> we create on the second line. In other words, it&rsquo;s the same as doing <code>this.app = app;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">App</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span> <span class="c1">// we&#39;ll look at &#39;let&#39; in just a second.</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">Injector</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Let</h3>

<p>The new <code>let</code> keyword is probably the easiest win that you can possibly get in using ES6. If you do nothing else, just start replacing <code>var</code> with <code>let</code> everywhere. What&rsquo;s the difference, you ask? Well, <code>var</code> is scoped to the closest enclosing <em>function</em>, while <code>let</code> is scoped to the closest enclosing <em>block</em>.</p>

<p>In essence, variables defined with <code>let</code> aren&rsquo;t visible outside of <code>if</code> blocks and <code>for</code> loops, so there&rsquo;s less likelihood for a naming collision. There are other benefits. See <a href="http://stackoverflow.com/questions/762011/javascript-let-keyword-vs-var-keyword">this Stack Overflow answer</a> for more details.</p>

<p>You can use it pretty much everywhere, but here&rsquo;s a good example of somewhere that it actually makes a difference in preventing a naming collision. The <code>userName</code>s inside of the <code>for</code> loop don&rsquo;t clash with the current user&rsquo;s <code>userName</code> defined just above it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">UserList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">userName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">current</span>
</span><span class='line'>    <span class="c1">// See the Fat Arrow section below</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">userComponents</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">user</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">let</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;userName&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">UserComponent</span> <span class="nx">displayName</span><span class="o">=</span><span class="p">{</span><span class="nx">userName</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;user-list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Welcome</span> <span class="nx">back</span><span class="p">,</span> <span class="p">{</span><span class="nx">userName</span><span class="p">}</span><span class="o">!&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">userComponents</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Const</h3>

<p>As you might guess from the name, <code>const</code> defines a read-only (constant) variable. It should be pretty easy to guess where to use this. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">DEFAULT_MAP_CENTER</span> <span class="o">=</span> <span class="p">[</span><span class="mf">48.1667</span><span class="p">,</span> <span class="o">-</span><span class="mf">100.1667</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">MapView</span> <span class="kr">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">centerMap</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">panTo</span><span class="p">(</span><span class="nx">DEFAULT_MAP_CENTER</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Fat Arrow</h3>

<p>You&rsquo;ve probably already heard about the fat arrow, or used it before if you&rsquo;ve written any CoffeeScript. The fat arrow, <code>=&gt;</code>, is a new way to define a function. It preserves the value of <code>this</code> from the surrounding context, so you don&rsquo;t have to use workarounds like <code>var self = this;</code> or <code>bind</code>. It comes in really handy when dealing with nested functions. Plus it looks really cool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">Toggle</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// iOS</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">$el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39;_label&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">$checkbox</span> <span class="o">=</span> <span class="nx">$el</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input[type=&quot;checkbox&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$checkbox</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">,</span> <span class="o">!</span><span class="nx">$checkbox</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;checked&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Template Strings</h3>

<p>Do you ever get sick of doing string concatenation in JavaScript? I sure do! Well, good news! We can finally do string interpolation. This will come in very handy all over the place. I&rsquo;m especially excited about using it in React <code>render</code> calls like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">ProductList</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">links</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">product</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{</span><span class="err">`</span><span class="o">/</span><span class="nx">products</span><span class="o">/</span><span class="nx">$</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="err">`</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)}</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;product-list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">links</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String Sugar</h3>

<p>It&rsquo;s always been kind of a pain to check for substrings in JavaScript. <code>if (myString.indexOf(mySubstring) !== -1)</code>? Give me a break! ES6 finally gives us some sugar to make this a little easier. We can call <code>startsWith</code>, <code>endsWith</code>, <code>includes</code>, and <code>repeat</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Clean up all the AngularJS elements</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">node</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">$node</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$node</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">).</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;ng&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$node</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Pluralize</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Pluralize</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">word</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">word</span> <span class="o">:</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">word</span><span class="p">}</span><span class="nx">s</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Check for spam</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">spamMessages</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/messages&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">messages</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">spamMessages</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">message</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">!</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">().</span><span class="nx">includes</span><span class="p">(</span><span class="s1">&#39;sweepstakes&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sing the theme song</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">sound</span> <span class="o">=</span> <span class="s1">&#39;na&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">sound</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// &#39;nananananananananana&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Argument Defaults</h3>

<p>Languages like Ruby and Python have long allowed you to define argument defaults in your method and function signatures. With the addition of this feature to ES6, writing Backbone views requires one less line of boilerplate.</p>

<p>By setting options to an argument default, we don&rsquo;t have to worry about cases where nothing is passed in. No more <code>options = options || {};</code> statements!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">BaseView</span> <span class="kr">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="p">(</span><span class="nx">options</span><span class="o">=</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spread and Rest</h3>

<p>Sometimes function calls that take multiple arguments can get really messy to deal with. Like when you&rsquo;re calling them from a <code>bind</code> that&rsquo;s being triggered by an event listener.</p>

<p>For example, check out this event listener from a Backbone view in a recent project I was working on. Because of the method signature of <code>_resizeProductBox</code>, I have to pass all those null arguments into <code>bind</code> and it gets kind of ugly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">ProductView</span> <span class="kr">extends</span> <span class="nx">BaseView</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">breakpointEvents</span><span class="p">,</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_resizeProductBox</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_resizeProductBox</span><span class="p">(</span><span class="nx">height</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">shouldRefresh</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In ES6, we can clean this up a bit with <em>spread</em>. We&rsquo;ll just prepend an array of default arguments with a <code>...</code>  to send them through as arguments to the method call.</p>

<p>Here&rsquo;s how you&rsquo;d do it using <em>spread</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">BREAKPOINT_RESIZE_ARGUMENTS</span> <span class="o">=</span> <span class="p">[</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ProductView</span> <span class="kr">extends</span> <span class="nx">BaseView</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">breakpointEvents</span><span class="p">,</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_resizeProductBox</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="p">...</span><span class="nx">BREAKPONT_RESIZE_ARGUMENTS</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_resizeProductBox</span><span class="p">(</span><span class="nx">height</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">shouldRefresh</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the other side of the coin is <em>rest</em>, which lets us accept any number of arguments in a method signature instead of at invocation time, as you can do with the <em>splat</em> in Ruby. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">cleanupViews</span><span class="p">(...</span><span class="nx">views</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">views</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">view</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Array Destructuring</h3>

<p>Sometimes I find myself having to access all of the elements of an array-like object with square brackets. It&rsquo;s kind of a bummer. Luckily, ES6 lets me use array destructuring instead. It makes it easy to do things like splitting latitude and longitude from an array into two variables, as I do here. (Note that I also could have used <em>spread</em>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">markers</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">listings</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">listing</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span> <span class="o">=</span> <span class="nx">listing</span><span class="p">.</span><span class="nx">latlng</span><span class="p">;</span> <span class="c1">// looks like: [39.719121, -105.191969]</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">listingMarker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">Marker</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">position</span><span class="o">:</span> <span class="k">new</span> <span class="nx">google</span><span class="p">.</span><span class="nx">maps</span><span class="p">.</span><span class="nx">LatLng</span><span class="p">(</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">lng</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">markers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">listingMarker</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Promises</h3>

<p>It seems like every project I work on these days uses promises. Native promises have landed in ES6, so we can all rely on the same API from here on out. Both promise instances and static methods like <code>Promise.all</code> are provided. Here&rsquo;s an example of a <code>userService</code> from an Angular app that returns a promise from <code>$http</code> if the user is online, and a native promise otherwise.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;userService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">offlineStorage</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">updateSettings</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">offlineStorage</span><span class="p">.</span><span class="nx">isOffline</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">resolve</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">());</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">promise</span> <span class="o">=</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/api/users/&#39;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">settings</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A Note On Modules</h2>

<p>You may have noticed that I didn&rsquo;t cover modules, importing, or exporting in this miniseries. Although modules are one of the higher profile features in ES6, and they&rsquo;re easy to get started with, they still have a lot of edge cases that need to be worked out as ES6 is rolled out.</p>

<p>Specifically, ES6 modules have a <code>default</code> export and named exports. CommonJS and AMD only support a single export, and traditionally handle named exports by exporting an object with the named exports as properties. The different ES6 module libraries have different ways of reconciling the differences, so you have to use only default exports or named exports if CommonJS might use the module. How these differences will be reconciled remains to be seen.</p>

<p>That said, the easiest way to start requiring modules is to switch from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="err">‘</span><span class="nx">lodash</span><span class="err">’</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>To the new syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">_</span> <span class="nx">from</span> <span class="err">‘</span><span class="nx">lodash</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, you can import relative files using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Router</span> <span class="nx">from</span> <span class="err">‘</span><span class="p">..</span><span class="o">/</span><span class="nx">router</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When exporting, you can switch from:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There’s a bit more to using modules (such as named exports), which we won’t cover today. If you want to learn more, take a look at <a href="https://babeljs.io/docs/learn-es6/#modules">this overview</a>.</p>

<h2>Conclusion</h2>

<p>In this miniseries, we took a look at some real-world examples of how you would use ES6 in a client-side JavaScript app. We took a quick look at setting up an ES6 transpile step in your build process, and examined many of the easy-to-use features you can start using right away.</p>

<p>Before you know it, ES6 will be the standard language in use across the web and on servers and personal computers everywhere. Hopefully, this walkthrough will help you get started with a minimum of fuss.</p>

<p>If you&rsquo;re feeling excited about ES6, and you want to learn more, I would suggest reading through <a href="https://babeljs.io/docs/learn-es6/">this overview</a>. Or if you&rsquo;re feeling really enthusiastic, try <a href="https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20%26%20beyond">this book</a>.</p>

<p>Until next time, happy coding!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[A Smooth Transition to ECMAScript 6: First Steps]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/06/09/a-smooth-transition-to-ecmascript-6-first-steps/"/>
    
    <updated>2015-06-09T06:28:25-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/06/09/a-smooth-transition-to-ecmascript-6-first-steps</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/smooth-transition-ecmascript-6-integration">Engine Yard</a>.</p>

<h2>Introduction</h2>

<p>I&rsquo;m really excited about the newest version of JavaScript, <em>ECMAScript 6</em> (ES6). But I&rsquo;m also terrified. There&rsquo;s already so much to do between mentoring, contributing to open source, and working on the projects that pay the bills. When will I ever find the time to learn a whole new version of JavaScript?</p>

<p>As developers, it&rsquo;s our blessing and curse to always be learning. When I think about getting ready to adopt ES6, I feel some anxiety about the thought of having to figure out all of the new patterns and APIs it exposes.</p>

<p>In this miniseries, we&rsquo;ll look at some quick and easy ways to integrate ES6 into what you&rsquo;re working on today. Hopefully, by adding ES6 patterns into our coding practice a little at a time, we&rsquo;ll be able to avoid spending a weekend learning the new API when we could be playing outside.</p>

<h2>Looking Ahead to ES6</h2>

<p>ES6 will be the first update to JavaScript since ES5 was finalized in 2009. ES6 was originally slated to come out in 2013, but was then pushed back a couple more times, and is expected to be finalized this month, June 2015.</p>

<p>There&rsquo;s a lot of JavaScript in programming these days.</p>

<p>It&rsquo;s found on the server as <a href="https://nodejs.org/">Node</a>, in <a href="https://developer.apple.com/library/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/">OS X Automation</a>, and of course, in all of the web browsers—where many of us spend most of our time writing JS apps. And we&rsquo;ll be writing ES6 in all of these locations before you know it. It&rsquo;s already standard in <a href="http://www.ember-cli.com/">Ember CLI</a>, <a href="https://www.airpair.com/angularjs/posts/preparing-for-the-future-of-angularjs">Angular 2.0 will be based on it</a>, and is <a href="https://github.com/joyent/node/wiki/ES6-%28a.k.a.-Harmony%29-Features-Implemented-in-V8-and-Available-in-Node">making its way into Node</a> bit by bit.</p>

<p>Thinking ahead, it&rsquo;s clear that JavaScript developers will need to start learning ES6 sooner or later. The good news is, it&rsquo;s a superset of ES5, which means all the ways we currently write code will still work. So we can just write code the way we always have done, until we see places where we can use something from ES6.</p>

<h2>Compatibility</h2>

<p>Before we get into the nitty-gritty of how to start using ES6, a quick note about compatibility. As of this writing, most JavaScript engines are in the process of implementing the features called for by the ES6 spec. To see a list of the features that are slated for release in ES6 (and how they compare with ES5), check out <a href="http://es6-features.org/">this reference</a>. If you want to read about specifically what&rsquo;s available right now, check out this <a href="http://kangax.github.io/compat-table/es6/">compatibility table</a>. In <em>this</em> miniseries, we&rsquo;re going to be focusing on the features that are currently available in the major ES6 engines.</p>

<p>There are many features that haven&rsquo;t been rolled out yet, but can be easily <em>transpiled</em> (transformed and compiled) to ES5 for immediate use. There are several compilers and polyfills available to help with transpiling. My favorite is <a href="https://babeljs.io/">Babel</a>, formerly called 6to5. Babel 5.0 was released on March 31, 2015, and is currently leading other options, with 76% of the spec in place.</p>

<p>Regardless of which transpiler you use, there are several features that are still mostly unsupported across all JS engines. These include: tail calls, WeakMap, WeakSet, Proxy, Reflect, Symbol, new.target, and subclassing built-ins, among others.</p>

<p>Some of these features are available in Babel, but only with experimental mode turned on. For the purposes of this miniseries, we&rsquo;ll be looking at some of the most widely supported, easy-to-use features—so we won&rsquo;t be covering experimental features like these.</p>

<p>We&rsquo;re also going to skip over some of the features that are a little more difficult to get started with, such as iterators, generators, and proxies.</p>

<h2>Getting ES6 Into Your Build Process</h2>

<p>Since we can transpile ES6 code to ES5 and start using it everywhere now, it doesn&rsquo;t hurt to get it set up in our build process, so that we can just start using it without having to think twice about it. Luckily, this is really easy to do with Babel.</p>

<p>It&rsquo;s beyond the scope of this miniseries to get into all the variations of what you might encounter in getting ES6 into your build process, but you probably won&rsquo;t have much trouble adding it as a step in your existing build process.</p>

<p>There&rsquo;s a Babel plugin available for just about every build setup, including Grunt, Gulp, and Broccoli, and whether you&rsquo;re using Browserify or RequireJS. It even has a built in <a href="https://babeljs.io/docs/usage/jsx/">JSX transpiler</a>, making it really easy to use with React. There&rsquo;s a full list of build tools and how to use them [on the Babel website] (<a href="http://babeljs.io/docs/using-babel">http://babeljs.io/docs/using-babel</a>).</p>

<p>You may also want to make use of the <a href="https://babeljs.io/docs/usage/runtime/">babel-runtime</a> package. This is an optional transformer that prevents duplication of common functions during compilation. It also sandboxes your code, aliasing many globals to <code>core-js</code> to avoid polluting the global namespace.</p>

<h3>With Browswerify + NPM Scripts</h3>

<p>Here&rsquo;s a look at how you might add Babel into an existing client-side JS project, using <a href="http://browserify.org/">Browserify</a> and the <a href="https://github.com/babel/babelify">Babelify</a> transform module.</p>

<p>In <code>package.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;postinstall&quot;</span><span class="o">:</span> <span class="s2">&quot;browserify --debug --standalone MyApp assets/js/index.js --transform [ babelify --optional babel-runtime ] --outfile build/my-app.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;babel-runtime&quot;</span><span class="o">:</span> <span class="s2">&quot;^5.0.12&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babelify&quot;</span><span class="o">:</span> <span class="s2">&quot;^6.0.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;browserify&quot;</span><span class="o">:</span> <span class="s2">&quot;^9.0.7&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that by defining the build script under the <code>postinstall</code> property, it will be run automatically after the package is installed. This might be handy when deploying to <a href="https://www.engineyard.com/">Engine Yard</a>, as it will prevent you from having to explicitly call a build in your deploy script.</p>

<h2>Let&rsquo;s Do It</h2>

<p>Now that you&rsquo;ve gotten ES6 set up in your build, you can just start writing it whenever you&rsquo;re developing. Or, if you don&rsquo;t feel like it, you can just fall back to ES5. Remember, it&rsquo;s all valid ES6!</p>

<p>In this post, we talked about the upcoming transition to ES6 everywhere that JavaScript is written. We’ve looked at which ES6 features are currently supported and how to get ES6 into your projects so you can start using it right away.</p>

<p>Make sure to tune tomorrow for part two of this miniseries, where we’ll walk through some of the easiest places to start using ES6 in a typical front-end <a href="https://blog.engineyard.com/2015/integrating-react-with-backbone">Backbone + React</a> project.</p>

<p>Until then, happy hacking!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Happy, Sad, Evil, Weird: Putting Use Case Planning Into Practice]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/05/26/happy/"/>
    
    <updated>2015-05-26T06:11:59-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/05/26/happy</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/happy-sad-evil-weird-use-case-planning-practice">Engine Yard</a>.</p>

<h2>Introduction</h2>

<p>In <a href="https://blog.engineyard.com/2015/happy-sad-evil-weird-feature-planning">part one</a> of this miniseries, we introduced formal Use Case Analysis and a simplified version called Use Case Planning which fits a rapid, iterative development process. That post went over the high-level concepts, and explained how this planning method will help you catch problems with your design before you start to implement.</p>

<p>In this post, the final post of this miniseries, we’ll step through a concrete example so you can see how to put Use Case Planning into practice.</p>

<h2>An Example</h2>

<p>We&rsquo;ll imagine that we work for a company that is building a multi-tenant Software as a Service (SaaS) platform where people can set up shops and sell products. Tenants will be able to charge their customers through the platform.</p>

<p>We&rsquo;re part of a team that&rsquo;s getting ready to create a credit card payment acceptance feature. It will be a credit card form common to all of our tenants. We&rsquo;ll be writing the markup by hand and using of <a href="https://stripe.com/">Stripe</a> for processing cards. We&rsquo;re entering a sprint planning meeting to define the scope of the work to be done and decide how long it will take to build.</p>

<p>During this meeting, we&rsquo;ll talk about many different aspects of the billing process. For the purposes of this post, let&rsquo;s hone in on one specific feature: once a user has clicked <em>Buy</em>, they are presented with a credit card form. We want to plan what will happen when they try to make use of this form.</p>

<p>Let&rsquo;s walk through the Use Case Planning process for this scenario.</p>

<h2>Step 1. Identifying the Actors and Their Roles</h2>

<p>People:</p>

<p><em>User</em>: exchanges money for goods
<em>Merchant</em>: exchanges goods for money and money for tenancy
<em>Platform Owner</em>: exchanges tenancy for money</p>

<p>Services:</p>

<p><em>SaaS Platform</em>: provides the space for tenancy and goods to be exchanged for money
<em>Stripe</em>: verifies and charges credit cards, handles much of <a href="https://www.pcisecuritystandards.org/">PCI compliance</a>
<em>Credit Card Company</em>: transfers funds between other actors</p>

<h2>Step 2. Describe The Purpose of The Feature</h2>

<p>Why do we want to build a credit card form? So that we can debit the user and credit the merchant and platform owner.</p>

<h2>Step 3. Identify Use Case Packages</h2>

<p>In this step, each of the stakeholders will contribute their point of view to the discovery of behaviors that we should consider.</p>

<p>When considering a set of use cases, I often like to think through the alternative paths first. As I mentioned above, they can yield interesting decisions that affect the way the happy path will be built.</p>

<h3>The Sad Path</h3>

<p>This time, we&rsquo;ll start with the sad path. Considering the sad path means thinking through what should happen when one of the actors does something differently than we want them to.</p>

<p>Let&rsquo;s identify some of the sad path use cases of filling out a credit card form.</p>

<p>Here are a few examples:</p>

<ol>
<li>User fills out the credit card form with invalid credit card information</li>
</ol>


<p>When this use case is identified, the designer might chime in that when this happens, the invalid fields should be highlighted and an error message should be displayed explaining what went wrong.</p>

<p>The QA technician might point out that these validations should be ironclad; no special characters should be allowed to pass through.</p>

<ol>
<li>Card is rejected by credit card company</li>
</ol>


<p>Here, the product owner might insist that it should take as few steps as possible to resubmit the form, so that the user doesn&rsquo;t become frustrated and decide not to buy the product.</p>

<ol>
<li>Stripe accepts card when submitted via JavaScript, but fails on subsequent server charge request</li>
</ol>


<p>The developer would want to make sure that passing error handling from the server back to the front end is captured in this use case.</p>

<h3>The Evil Path</h3>

<p>Coming up with evil paths requires to you to think like an attacker. How many ways can you come up with to exploit the feature you’re trying to build?</p>

<p>For example:</p>

<ol>
<li>Price as set in a hidden form field and user figures out that they can change it to zero</li>
</ol>


<p>In this scenario, the developer would want to make sure that the form is built correctly.</p>

<ol>
<li>Hacker steals credit card info from the database, server logs, or an insecure network request sent over HTTP</li>
</ol>


<p>The product owner would want to mitigate against this as much as is possible so as the protect the customer’s data. From a legal perspective, the product owner would also want to ensure that the SaaS company could not be held liable for any losses, and crucially, that PCI compliance was met.</p>

<ol>
<li>If we were to save the credit card information to the user account, a hacker could launch a <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF attack</a>, leveraging a logged in user&rsquo;s account information to order products without authorization.</li>
</ol>


<p>The developer would suggest using a CSRF token, and the QA technician would want to make sure that form submission failed when the token was changed.</p>

<ol>
<li>Security holes in session or authentication opens users up to charges</li>
</ol>


<p>Here, the QA technician might ask what would happen when cookie or local storage data is changed. Does it fail as it should?</p>

<h3>The Weird Path</h3>

<p>Coming up with weird paths requires a little more creativity.</p>

<p>Consider each component that your feature interacts with (both internally and externally, locally and remotely, and so on) and think through what would happen if that component failed or behaved in an unexpected way.</p>

<p>For instance:</p>

<ol>
<li>JavaScript is disabled in the user’s browser, and  the event listener that would prevent the form from being submitted doesn’t fire. The <code>form</code> element falls back to its default behavior, which is to submit it to the SaaS server. The credit card number now appears in the server logs, making it vulnerable to information theft.</li>
</ol>


<p>The developer would want to ensure that the form is built such that it would never be submitted to the SaaS server by mistake.</p>

<ol>
<li>Stripe server is down</li>
</ol>


<p>In this case, the designer would ask for some kind of error page, perhaps with a link to a status page where users could check for the servers to come back online.</p>

<ol>
<li>Connection to Stripe is interrupted during transaction</li>
</ol>


<p>The product owner might ask if we can resend the submission if the connection was interrupted. The developer would probably push back on that request, for security reasons. As a compromise, the designer might offer to invent an error state to be shown in this case.</p>

<h3>The Happy Path</h3>

<p>This one is easy. How do you want the feature to work?</p>

<ol>
<li>User successfully fills out form and clicks submit</li>
</ol>


<p>Again, the designer would probably like to display some kind of success message here.</p>

<ol>
<li>Credit card charge is accepted by Stripe</li>
</ol>


<p>In this scenario, the product owner might ask to have the page views leading to the successful charge tracked in an analytics service, so we could track down and encourage the same behavior in the future.</p>

<h2>Step 4. Name and Diagram Use Cases</h2>

<p>We&rsquo;ve now identified twelve use cases for the credit card form feature.</p>

<p>I tried my hand at documenting them all in a Use Case Diagram. Green arrows represent good requests or responses, and red arrows represent errors. Bombs represent a broken network connection.</p>

<p><img src="" alt="" /></p>

<p>As you can see, there are tons of arrows.</p>

<p>There are a lot of possible scenarios, and a lot of possible communications between the actors in the system. If we hadn&rsquo;t taken the time to think them through and uncover them all, there&rsquo;s high probability that we would have left some of these out.</p>

<h2>Converting To User Stories</h2>

<p>Now that we&rsquo;ve gone through these four steps, we&rsquo;ve come out with something very valuable: bite-sized sentences that can be translated directly into stories and entered into our tracker software.</p>

<p>Here&rsquo;s what the first sad path case might look like when worded as a story:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>As a user, when I complete the form with invalid information and click submit, I should see the invalid inputs become highlighted, and I should see validation errors telling me what went wrong so that I can correct my error and successfully buy products.</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have an actor (user), action (fill out and submit form), a result (show validation errors), and a business purpose (the user can give us money).</p>

<p>These twelve stories are small and clear, and lend themselves to being prioritized based on the priorities of our business. Once we enter them into our tracker, we can be assured that they will all be built, and we can estimate how long it will take to happen.</p>

<h2>Conclusion</h2>

<p>The Use Case Planning process is not super complicated. It consists of identifying who/what is involved, why we care, what should happen in the happy and alternative scenarios, and how do the scenarios relate?</p>

<p>It&rsquo;s a relatively low level of effort to answer these four questions and break down the scenarios, but the result is worth its weight in gold. It enables us to identify architectural concerns and edge cases early on and change them at a low cost. We&rsquo;ve also ended up with a set of small stories with clear acceptance criteria that we can track, providing a huge value both in accountability and estimating timelines.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Happy, Sad, Evil, Weird: Driving Feature Development With Feature Planning]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/05/21/happy/"/>
    
    <updated>2015-05-21T06:11:29-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/05/21/happy</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/happy-sad-evil-weird-feature-planning">Engine Yard</a>.</p>

<h2>Introduction</h2>

<p>When building software iteratively, feature planning has to  be done early and often. But it can be a complicated process due to all of the stakeholders involved, each with different viewpoints and goals.</p>

<p>What&rsquo;s more, it&rsquo;s easy to overlook key behaviors of a feature, which can lead to expensive and rushed code later. It&rsquo;s usually intuitive to figure what should happen when everything goes according to plan, but what about edge cases? What should happen when a user supplies bad data? A hacker launches a malicious attack on our application? What about when <a href="https://github.com/Netflix/SimianArmy">chaos makes the whole system unstable</a>?</p>

<p>In the first post of this miniseries, we&rsquo;ll take a look at one way to get everyone&rsquo;s voice heard in the planning process, including the product owner, developer, designer, and QA engineer. Using this approach, teams can draw on their diverse perspectives to tease out a detailed blueprint of a feature that costs less and performs better.</p>

<h2>Introducing Use Case Planning</h2>

<p>Use Case Planning is a term that I&rsquo;ve come up with to represent a simplified version of <a href="http://en.wikipedia.org/wiki/Use-case_analysis">Use Case Analysis</a>. I&rsquo;m aiming to simplify the software feature planning process into a simple, reusable procedure that will save teams money and build more robust systems.</p>

<p>With Use Case Planning, teams can stay flexible early in the game, when it&rsquo;s still cheap to make big changes to the system.</p>

<p>It also helps us look ahead and find edge cases. For many people, it&rsquo;s easy to press forward naïvely, writing stories about how a feature should behave entirely in terms of the best-case scenario (also known as the <a href="http://en.wikipedia.org/wiki/Happy_path">Happy or Golden Path</a>). But there are many other cases to consider. What about bad data (Sad Path), hacker attacks (Evil Path), or web services going down (Weird Path)?</p>

<p>In the end, thinking through these scenarios in advance of development will save a company money and result in features that provide a better user experience.</p>

<h2>What Is Use Case Planning?</h2>

<h3>Background</h3>

<p>If you&rsquo;re not familiar with Use Case Analysis, it&rsquo;s an academic approach based in <a href="http://en.wikipedia.org/wiki/Object-oriented_analysis_and_design">Object Oriented Analysis</a>—a way of describing any kind of system (not just software) in terms of conceptual objects.</p>

<p>I first became aware of Use Case Analysis through the work of <a href="http://people.cs.uchicago.edu/~mark/">Mark Shacklette</a>, a professor of Computer Science at the University of Chicago. In <a href="http://people.cs.uchicago.edu/~mark/51023/Ucstyleg.html">this paper</a>, he lays out a very detailed process for building systems with Use Case Analysis. However, I found it to be over-complicated for regular use. I build a lot of software for clients, and need a &ldquo;boiled down&rdquo; version that I can reach for when planning sessions are  constrained by time. Use Case Planning is my attempt at creating that.</p>

<h3>What&rsquo;s Required?</h3>

<p>In the software industry, when we&rsquo;re getting ready to build a feature, we have to answer three basic questions:</p>

<p>What&rsquo;s required to build it?
How should it behave?
What people and computer systems are involved?</p>

<p>Through the Use Case Planning process, we&rsquo;ll answer these questions and come out with a  blueprint detailing what we need, the dependencies involved, and the ways our feature should work.</p>

<h3>Who&rsquo;s Involved?</h3>

<p>Feature planning is usually carried out by a team of stakeholders rather than an individual. Product owners, developers, designers, QA technicians, and so on all bring a unique perspective and set of concerns to the table. Drawing on these varied mindsets helps us make a more comprehensive plan than we could come up with on our own</p>

<h3>Scenarios</h3>

<p>Let&rsquo;s imagine we&rsquo;re on such a team, and we want to plan a feature with Use Case Planning. We&rsquo;ll need to break it down into as many use cases, or scenarios, as we can, weaving a story of interactions between people of various roles and the computer systems involved.</p>

<h2>Why Think About Use Cases?</h2>

<p>There are many benefits to breaking down a feature into use cases.</p>

<p>First of all, talking through software&rsquo;s desired behavior in simple everyday language opens the conversation up to all stakeholders. The whole team can work together to determine how a feature should work without jargon getting in the way.</p>

<p>The team involved in the planning process is essentially trying to define a <em>contract</em> of what will be built and what it will do. Use Case Planning makes this contract more resistant to change, as unforeseen circumstances are accounted for before the first line of code is ever written. Also, functional parts of the system are less likely to fall through the cracks when a variety of scenarios are considered up front.</p>

<p>This approach can also help guide architectural decisions. Sometimes, a feature can be ruled out entirely, before any time is ever spent building it. For example, concern about having bots or script-generated users in a system could push a team toward including an email confirmation workflow, or choosing <a href="http://oauth.net/">oAuth</a> over traditional authentication.</p>

<p>In my mind, perhaps the most valuable benefit of use case analysis is that it gives teams a way to describe a system that costs very little to modify. In talking through alternate paths early, it&rsquo;s easy to change requirements before anything&rsquo;s ever built. This is a huge win, because as time goes on, code is written, and the system begins to take shape, the cost of change increases significantly.</p>

<p>Adding and removing features from a use case story or diagram is easy. Changing them in UX flow diagrams and wireframes is harder, in design comps harder still, in development code even harder, and in a production app it can be extremely hard. But when you&rsquo;re planning, making changes is as easy as throwing away a sticky note and writing a new one, so it pays to think through as many of the potential scenarios as possible at this early stage.</p>

<h2>How To Do Use Case Planning</h2>

<p>Now that we&rsquo;ve talked about the benefits and goals of use case planning, <em>what exactly is it</em>? As I mentioned above, this is my attempt at boiling Use Case Analysis down into a set of memorable, repeatable steps. They mirror the steps in Mark Shacklette&rsquo;s original paper pretty closely, but I&rsquo;ve tried to rework them to the minimum of what I think <em>I</em> would need when planning a feature before beginning work.</p>

<h3>The Four Steps</h3>

<p>To complete the four steps, answer these four questions:</p>

<ol>
<li>Who are the actors and what are their roles?</li>
<li>What&rsquo;s the purpose of this feature?</li>
<li>What are the use cases?</li>
<li>How do the use cases relate to each other?</li>
</ol>


<p>In thinking about the first question, we&rsquo;ll expand our definition of &ldquo;actors&rdquo; from just people to include everything that interacts with the system: users, administrators, our client-side application, our API, external APIs, cloud services, and hardware interfaces. Each of these actors has a role and a responsibility in the system that we should identify.</p>

<p>In identifying the purpose of the feature, we are just looking for a high-level summary of why we care about it. What&rsquo;s the business value?</p>

<p>When we get to the third question, we&rsquo;re ready to dig into the meat of this process. We&rsquo;ll think through all of the use and misuse cases, considering the Happy, Sad, Evil and Weird paths. For each one, we&rsquo;ll choose a a noun (the actor), verb (actions taken), and a brief description of the desired result. We can also optionally add a more specific purpose (like we identified in step two) to each case as we go.</p>

<p>After step three, we will have identified many use cases, each with a name, an actor, and a breakdown of all the required behavior. Using this information, we can answer the last question (how do they relate?) by diagramming their interactions. There&rsquo;s an example of a use case diagram for ordering at a restaurant <a href="http://en.wikipedia.org/wiki/Use_Case_Diagram#/media/File:Use_case_restaurant_model.svg">on Wikipedia</a>.</p>

<p>The diagram is in a formal Use Case Analysis style. For the purposes of planning software, it might make sense to replace this style of diagramming with a UX flow diagram, using the screens in the app to delineate how the feature should behave.</p>

<h3>Wrapping It Up</h3>

<p>Once we&rsquo;ve identified the various use cases associated with our feature, we can translate these results directly into agile stories. Using a tracking tool like <a href="https://sprint.ly">Sprint.ly</a>, we can then prioritize the work that needs to be done and estimate the time it will take to complete the feature. Each user case can be sized, tagged, and tracked, providing a helpful look into the progress being made toward bringing our feature to fruition.</p>

<h2>Conclusion</h2>

<p>In this post, we introduced formal Use Case Analysis and a simplified version called Use Case Planning which fits a rapid, iterative development process. We went over the benefits, the steps involved, and explained how this planning method will help your team catch problems with your design before you start to implement it.</p>

<p>That’s it for this post, but tune in next week for part two (the final part) of this miniseries, where we’ll be stepping through a concrete example so you can see how to put Use Case Planning into practice.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Actually MVP]]></title>
    <link href="http://fluxusfrequency.github.io/blog/2015/05/13/actually-mvp/"/>
    
    <updated>2015-05-13T06:11:09-06:00</updated>
    <id>http://fluxusfrequency.github.io/blog/2015/05/13/actually-mvp</id>
    
    <content type="html"><![CDATA[<p>This post originally appeared on <a href="https://blog.engineyard.com/2015/actually-mvp">Engine Yard</a>.</p>

<h2>Introduction</h2>

<p>In the startup world, there is a lot of talk about building <em><a href="http://en.wikipedia.org/wiki/Minimum_viable_product">Minimum Viable Products</a></em> (MVPs). At this point, the concept has become so well-accepted that it has almost become a kind of unquestioned dogma. Yet there is a lot of disagreement about what MVP is exactly, and how to carry it out. Many people in the software industry assume that they know what MVP means, and claim to be using the process, but their production workflow tells a different story.</p>

<p>When it comes to building software, it is often tempting to take an approach akin to building a skyscraper: write the blueprints, obtain the necessary prerequisites, then build it to spec. But software is a quickly shifting market. A businessperson may think she knows what the market wants, and plan and begin a project to meet that desire. But by the time the product is built, the needs of consumers have often morphed in a direction that she could never have foreseen.</p>

<p>In this post, we&rsquo;ll take explore some common misconceptions about MVP, some different ways to approach building one with software, and how to best use this tool if you&rsquo;re the CEO or CTO of a startup, a product manager for an established company, or a consultant.</p>

<h2>Why MVP?</h2>

<p>We hear a lot of talk about MVP and its value, but as a businessperson, why should you care? The reason is simple: it prevents you from spending money building a product that nobody wants.</p>

<p>When you build your business around small, successive iterations, the time before you can reflect on lessons learned is as small as possible. It can even push you to decide <em>not</em> to build your big idea, saving you valuable time and resources.</p>

<p>Another great benefit of an MVP approach is that it allows you to test a hypothesis with minimal resources. If you have no money in the bank, you can still <a href="http://venturebeat.com/2013/12/10/homeless-coder-prevails-over-skeptics-releases-mobile-app-to-get-off-the-streets/">get something off the ground</a>.</p>

<h2>History</h2>

<p>In the startup world, the idea of MVP was popularized by <a href="http://www.amazon.com/Four-Steps-Epiphany-Steve-Blank/dp/0989200507">Steve Blank</a> and <a href="http://www.startuplessonslearned.com/2008/10/about-author.html">Eric Ries</a>. Eric&rsquo;s 2008 blog post, <a href="http://www.startuplessonslearned.com/2008/09/lean-startup.html">The Lean Startup</a>, kicked off a movement in software development toward building companies around the idea of testing business hypotheses in an iterative way. The idea of MVP is central to this approach, and has become part of the <em>lingua franca</em> of startup culture.</p>

<p>The origins of MVP (and lean software development) draw on the Toyota corporation&rsquo;s <a href="http://en.wikipedia.org/wiki/Lean_manufacturing">lean manufacturing approach</a>, called the <em>Toyota Production System</em> (TPS). Toyota bigwig <a href="http://en.wikipedia.org/wiki/Taiichi_Ohno">Taiichi Ohno</a> coined the idea of &ldquo;Just In Time&rdquo; production, in which return on investment is maximized by reducing inventory.</p>

<p>Among other things, the TPS introduced the idea of <a href="http://en.wikipedia.org/wiki/Kanban">Kanban</a>. The key takeaway of TPS as it applies to software is this: <strong><em>production is determined according to the actual demand of the customer</em></strong>.</p>

<h2>It&rsquo;s Not What You Think It Is</h2>

<p>We&rsquo;ve all seen this picture right?</p>

<p><img src="https://blog.engineyard.com/images/blog-images/actually-mvp.png" alt="" /></p>

<p>Raise your hand if you think it&rsquo;s a good idea.</p>

<p>Now raise your hand if you think you actually follow it. Really? Are you sure you didn&rsquo;t motorize your skateboard? Put a steering wheel on your bike? Let me ask you this: did you actually do a customer interview at any point to see if they even <em>wanted</em> a car?</p>

<p>An MVP may not be what you think it is. Eric Ries <a href="http://www.startuplessonslearned.com/2009/08/minimum-viable-product-guide.html">defines it</a> as &ldquo;that version of a new product which allows a team to collect the maximum amount of validated learning about customers with the least effort&rdquo;. What does that actually mean?</p>

<p>It means building just enough of a product to be deployed and used. It&rsquo;s the <em>minimum</em> feature set that you need to find out whether it makes sense to invest further in an idea. If you&rsquo;re building a dating site for dogs, what do you need? Profiles and messaging. You don&rsquo;t need favoriting, automated emails, or the ability to see who viewed your profile.</p>

<p>If you&rsquo;re breaking ground with a new idea, you can ask yourself: would people use this?
If you&rsquo;re spinning something that&rsquo;s already out there, ask: would people love this more than what they&rsquo;re using now?</p>

<p>Then answer that question. Build profiles and messaging, put it in front of some users, and see if they love it. Track clicks, invite them in for an interview, get their email and reach out personally. Identify <em><a href="http://en.wikipedia.org/wiki/Performance_indicator">Key Performance Indicators</a></em> (KPIs) and use them to verify success.</p>

<p>If they love it, keep going! Add a link to favoriting that doesn&rsquo;t work. Track clicks. If enough people are trying to favorite, build it. Invite users in for an interview. Get their email and reach out personally.</p>

<p>If you try several different feature sets and find out that nobody wants a dating site for dogs, it&rsquo;s ok. In fact, that&rsquo;s great. That means you really did it. You tested the market cheaply <em>before</em> you sunk bags of money into building Doggie Dates. That&rsquo;s a win.</p>

<p>An MVP is not just doing sprints to build your product over time. It’s an <em>experimental process</em>.</p>

<p>It&rsquo;s a small vision, tested and validated thoroughly before moving forward.</p>

<p>It&rsquo;s not twelve weeks of development and a release.</p>

<p>It&rsquo;s continuous deployment.</p>

<p>It&rsquo;s <a href="http://vincentjordan.com/2012/01/why-is-your-minimal-viable-product-mvp-really-just-a-pos/">not a buggy alpha site</a> with ten features that <em>kind of</em> work.</p>

<p>It&rsquo;s the two most defining features needed for the product to be useful.</p>

<p>It&rsquo;s bare, not broken.</p>

<p>On the other hand, an MVP approach is <a href="http://www.startuplessonslearned.com/2009/03/minimum-viable-product.html">not just <em>release early, release often</em></a>, either. Yes, build a small thing. Yes, gather feedback and incorporate it. But don&rsquo;t let the feedback cause you to pivot so hard that you can&rsquo;t remember what you were trying to do in the first place. If you find yourself testing Amazon for dog toys instead of a dating site for dogs, you haven’t pivoted for product-market fit, you’ve pivoted to an entirely new idea.</p>

<p>Start with a vision and stay true to it. Build the skeleton, and let feedback from early users help you flesh out the details.</p>

<h2>Really MVP</h2>

<p>So you want to build a thing, huh? You&rsquo;re going to change the world, like Steve Jobs? Slow down there, buckaroo! I hope you know what you&rsquo;re getting into.</p>

<p>According to <a href="http://get2growth.com/how-many-startups/">this article</a>, there were 1.35 million tech startups as of February 2014. Before you start dreaming of all that VC cash and crack your wallet open to get things off the ground, why don&rsquo;t you do a little experiment to see if it&rsquo;s at all likely that you&rsquo;ll end up anywhere besides broke.</p>

<p>The lean startup approach is all about the <a href="http://theleanstartup.com/principles">build-measure-learn</a> cycle. Before you have a company, you&rsquo;ll have to start by building something.</p>

<h3>First Step: Build</h3>

<p>What&rsquo;s the smallest first step you can take?</p>

<p>The classic example of an MVP you can use to test an idea is a landing page with a sign up form. The idea is to build a pixel-perfect landing page touting all the benefits of joining Doggie Dates and deploy it on an easy-to-use platform like <a href="https://www.engineyard.com/">Engine Yard</a>. Then you drive users to the site by purchasing some Google AdWords, and entice them to sign up with their email for early access to the application.</p>

<p>There has been some recent debate as to whether a landing page is even an MVP. Although some would say no, like <a href="http://ramlijohn.com/a-landing-page-is-not-a-minimum-viable-product/">Ramli John</a>, this strategy doesn&rsquo;t provide enough insight to complete the build-measure-learn cycle. <a href="http://www.startuplessonslearned.com/2009/03/minimum-viable-product.html">Eric Reis</a> and <a href="https://medium.com/@joelgascoigne/how-to-successfully-validate-your-idea-with-a-landing-page-mvp-ef3c2d02dc51">others</a> seem to disagree. A landing page <em>can</em> provide enough information to build a successive MVP and continue to gather feedback. If they sign up they&rsquo;re probably interested in what you&rsquo;re selling.</p>

<p>Although Ramli John isn&rsquo;t a fan of landing pages, he does have some other great suggestions for ways to build a first MVP. Some startups, like AngelList, have begun as an email list. Blogs can be another great place to gather interested users. We&rsquo;ve talked about Eric Reis quite a bit already. His <a href="http://www.startuplessonslearned.com/2008_08_01_archive.html">blog</a> covered topics like refactoring, TDD, and fundraising before he was known for the Lean Startup. You can try getting off the ground with a video and a startup campaign. Finally, you can do it the old fashioned way: <em>the hustle</em>. Just sell your service. In person. <em>Before</em> you build an app.</p>

<p>Landing pages are great for founders of small startups and developers with a great idea for a side project, but what does MVP mean if you have another sort of job?</p>

<p>If you&rsquo;re a consultant like me, encourage your clients to prioritize their feature requests. We have so many awesome things in mind for Doggie Dating! Favoriting, profile walls, see who viewed me, a Dogs You Might Dig service, responsive layouts, native mobile versions&hellip; The list goes on and on. It&rsquo;s great to write them all down and put them in a tracking tool like <a href="https://sprint.ly/">Sprint.ly</a>, so that you don&rsquo;t lose all these creative ideas. Then it&rsquo;s time to prioritize.</p>

<p>What do you need first? What is the smallest version of your idea that people (or dogs) could possibly use? Put those tickets at the top of your tracker, and mark the point when they&rsquo;ll be done with a release bar. Encourage your clients to ask themselves: &ldquo;is this necessary for people to use the site?&rdquo; before you put <em>anything</em> above that bar.</p>

<p>Once you&rsquo;ve reached it, follow the steps below! Measure and learn before you go on. That way, you can collectively decide what should <em>actually</em> be built, instead of spending the client&rsquo;s money building things that are going end up being discarded.</p>

<p>If you&rsquo;re a Product Owner, maybe you&rsquo;re charged with exploring new ways that your company can gain more users, or convince the existing ones to pay more. There are some cool tricks you can use to sneak a feature MVP into what&rsquo;s already there. You can make  links that claim to take the user to one or more features, but are actually inactive (preferably with a modal dialogue to explain what’s going on). Then you track the clicks and decide what to build from there. Or you can ask users to pay for a certain feature before you actually begin development on it. If you don&rsquo;t reach a certain threshold of sign-ups, you just cancel it, apologize, and refund the money.</p>

<p>No matter your role, if people don&rsquo;t seem to want what you&rsquo;ve put out there, delete it and build another version of your dream. Be happy about all the time and money you just saved by not building something that nobody wants! Keep going until you find something that sticks. In this way, you&rsquo;ll set up a great foundation on which to build the rest of your business.</p>

<h3>Second Step: Measure</h3>

<p>Regardless of how you choose to build the first version of your idea, you&rsquo;ll want to measure user engagement once it&rsquo;s deployed. The easiest way to do this is to add Google Analytics into the page and track clicks and pageviews. Reflecting on this information, you&rsquo;ll begin to learn what people want. If anyone actually signs up on your landing page with their email, you can reach out personally (maybe even take them to lunch) and ask them questions to learn more about what people would want to use.</p>

<p>Once you&rsquo;ve gotten past the first iteration of your MVP, you can also invite customers to user testing sessions. These sessions can offer great insight into how your application should behave, and which features are misunderstood or unwanted. Finally, <a href="http://www.startuplessonslearned.com/2008/09/one-line-split-test-or-how-to-ab-all.html">A/B testing</a> can be a great way to research which direction to go next once you&rsquo;ve passed the early stages.</p>

<h3>Third Step: Learn</h3>

<p>After you&rsquo;ve measured clicks, user responses, user testing, and A/B testing results, you can begin to draw conclusions. Maybe dating dogs don&rsquo;t care about favoriting. Delete that feature. Maybe you heard over and over again that having a profile &ldquo;wall&rdquo; would make a huge difference to users. Perhaps that should be the next thing you build?</p>

<p>You need to sift through all of the information that you get and decide how to act.</p>

<h2>Conclusion</h2>

<p>In the software industry, a lot of people pay lip service to the idea of a Minimum Viable Product. But for many of us, it&rsquo;s not what you think it is.</p>

<p>If you&rsquo;re thinking: I know what people want, and I&rsquo;m going to build it, you&rsquo;ve already misunderstood the process. MVPs are experiments, research. How you use them differs a little bit depending on your situation, but the basic premise is the same. Build a small thing, measure the way it&rsquo;s used, learn from it, repeat.</p>
]]></content>
    
  </entry>
  
</feed>